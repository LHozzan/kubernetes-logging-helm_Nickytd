---
# Source: kubernetes-logging/templates/logging-rbac.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: elk
  labels:     
    app: elk-kubernetes-logging
    chart: kubernetes-logging-0.8.0
    release: elk
    heritage: Helm
spec:
  privileged: true
  allowPrivilegeEscalation: true
  readOnlyRootFilesystem: false
  volumes:
  - "*"
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  runAsUser:
    rule: RunAsAny
  fsGroup:
    rule: RunAsAny
---
# Source: kubernetes-logging/templates/logging-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: elk-priv
  labels:     
    app: elk-kubernetes-logging
    chart: kubernetes-logging-0.8.0
    release: elk
    heritage: Helm
---
# Source: kubernetes-logging/templates/logging-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: elk
  labels:     
    app: elk-kubernetes-logging
    chart: kubernetes-logging-0.8.0
    release: elk
    heritage: Helm
---
# Source: kubernetes-logging/templates/elasticsearch/es-certificates-sec.yaml
apiVersion: v1
kind: Secret
metadata:
  name: elk-certificates
  labels:     
    app: elk-kubernetes-logging
    chart: kubernetes-logging-0.8.0
    release: elk
    heritage: Helm
type: Opaque
data:
  node-key.pem: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2Z0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktnd2dnU2tBZ0VBQW9JQkFRQzhVWW96QXc4K201KzMKS3lJWjZaTE5odm9QM3U5aGl3STB4Y2dxZE9lQ3krK1hKd2dmbWZFb3NxZmt0emxPakMraFBVMnpJZUIyK2hrVApRRzJKYWdYVWJ3TWNHVVlqbFljallpS2hQR1lYd1hlbDh0RHI1QVVVMDR6NnhSdGlYMmQ2bnVFaWU4OGlRZUdpCnhhRWJUazNaVHdTQ05LREpyM01WRGsxZ3J2QXc4Qld0dVp5bmlpaE5xRitsQ1I0N2FjQ2JubjhLMlRpa0lXeTkKbE9QdnZnUjMySWtRbFpBRHpFVFZmcWh2OTV2WnF0MzZoc3ZTKzJWTDV2TnV2OGpSUTQwcEQzMmZqNDlpL3pQNQpoODg5S1pLWHFkQVBiV3VQZGVMZ2dSTGllUDVQMW1QcUhMWW4rODE3T25QY3YzaEtwRGNUTzExbnJwK0YyamdKCnNsU0NvcWFuQWdNQkFBRUNnZ0VCQUs5Yk5sY2VDRG9DYkEwQ0t6VDUzT3RwUHIwOG1LZTU2NG44aWRHUEhtMGIKUGJVQWNYNEx1Ulp1bGd4UjJSa2RUTlRWNHQ1bE0wRld6YmF4amM0aFhlQmNwd2FwT2ppMGFpdzJtNHlNVTN6WAplSFNjMEpKM3Q0dVhHbllBeU9rbmNaSXJFL1VxV016TGtESWoyVXMxOVNQZmdwRkVORnpaOVUyc0RiMXo2TkdICmhVVEhWWWpzVzdLb3FXMjV6TG1Yc08zeG9RWGdLVVBSd3ZmT3dDNlVLNXY1azU3cUhXeExtc0J2Q0p0a0ltMmIKZjFNRlNnMVBBbjdTMWdpNm1MdUFBWis3YVpwM0phSUluMm92bllhenhLM1o3RkR1N2Z2ZG5PS1JpNjM4MDB0Qwp0czduNlg4dW01dHFnQ0c3UmZDSldDaUNmcmNJS1FGRWF1VHhMd09UQStFQ2dZRUE1TmY5aXczTEh0NDJPc0p5CktuV2tPbkFhVG1mQ2hhNFZCUWk0bjlWR05Qd2pEaUpTcytTamJOelUySHZ6M2xMTGxtNGtmTzdUT0V5OGc5d0QKeVBvajhXRThkNDFnTUQzYkxnNFRFMEpsWERuZ0dpVDR6aVhMdS9yTFBpbXc5ckNoQkJqckg1OUtKd3hYNUlkdQpWdXgxaUdyUWJldlRJT3o1b1lBdEVFcnhqRzhDZ1lFQTBxcHd2a05RZEsvbldhT1RuSFkxYnpFUmNBN2lsYmJSCmNCVFZVYnM1aWtRbmxZWkhQT24wZ05XQ3ZJRHh5V3FYR3g4eUdwZzlzQzV2NUZZM01zekszYndCek0xa3RLUXAKaDNrQmFJeWszdFA5Z0NRL2d2YnRNVFVyUE5temVrVGlGbmw3cHU1NnQrYVhWcGQwN0VMR2tjbjVkUmdzZVM0QwpkUTVRcDEvTGxVa0NnWUVBMWlFUTJtdUdzNVNEczhtOFgrU0NUamdWTldZN2l6Q1A5SXpyakl0WXpUMWNZOTVUCitvWW5NVGNWWnBmZFlodWc2bHFYZzl0SkF2WXlzME5NdTJMci9QSGFUWmVZK0tyNGl3aWFhcndHOGh3cGlPMHQKYmwvSldsVGFsb2tXVUU2SDY3aVJVWjZRR1NlZ21uTHJHU1RhK1ZIUlEvbVZMY3J2N21Gc1NVR0c4YnNDZ1lCawpJVnNCTkNHVHRPQXp2UW8yUGdGYjNtaTVhSG5PUzF6MDl4SUZqUVhtY0VxWVNZQ210VlRmdjV3cVdPZVRvclE3CjBmSVFyZmYwTzc0M083dDB5OTVJMGtuUXZIZDNYT2ZZV20yTzhmcVRaeE9BeXJuZFY5eVpuUG4yTEV1Z2ZBa3kKUVgvQ2NtdWw2VlpaZEJmQkRHUXhlMXkwaVU3cU1qSTh6UmNNMXYxKzhRS0JnRGZMMWU5VjhNMUV0WEpBU282YwpjV01MOUhNbkJrYVVJM2l1dGwrZkF1Z2s1Tld6cW1hbGx5K0ZBVUM2WEVpN3dKcytlMmQ1ZGFiQ0ZxM09jRmttCmJkbW1IdmJIcjJmWklnMG1INGpYSUg2KzlVdHZ4eFlUakhZeHdLa1h1dGo5c2xBYW85NHpXYlNKajZzY255TjEKWFRVOFZNVmhTTmJ2UjhGeFdSVVk3ZmhWCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
  node.csr: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0KTUlJQ21EQ0NBWUFDQVFBd1V6RUxNQWtHQTFVRUJoTUNSRVV4RERBS0JnTlZCQW9NQTBzNFV6RVFNQTRHQTFVRQpDd3dIYkc5bloybHVaekVrTUNJR0ExVUVBd3diS2k1c2IyZG5hVzVuTG5OMll5NWpiSFZ6ZEdWeUxteHZZMkZzCk1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBdkZHS013TVBQcHVmdHlzaUdlbVMKelliNkQ5N3ZZWXNDTk1YSUtuVG5nc3Z2bHljSUg1bnhLTEtuNUxjNVRvd3ZvVDFOc3lIZ2R2b1pFMEJ0aVdvRgoxRzhESEJsR0k1V0hJMklpb1R4bUY4RjNwZkxRNitRRkZOT00rc1ViWWw5bmVwN2hJbnZQSWtIaG9zV2hHMDVOCjJVOEVnalNneWE5ekZRNU5ZSzd3TVBBVnJibWNwNG9vVGFoZnBRa2VPMm5BbTU1L0N0azRwQ0ZzdlpUajc3NEUKZDlpSkVKV1FBOHhFMVg2b2IvZWIyYXJkK29iTDB2dGxTK2J6YnIvSTBVT05LUTk5bjQrUFl2OHorWWZQUFNtUwpsNm5RRDIxcmozWGk0SUVTNG5qK1Q5Wmo2aHkySi92TmV6cHozTDk0U3FRM0V6dGRaNjZmaGRvNENiSlVncUttCnB3SURBUUFCb0FBd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFFMVZuS0tqbGZxVUo4SWdvcWhBTC8wcnVzdHkKOXVadUFVQVdsSWVBUkJiSXByRVNwcEJKcnpqS2lxdXo1ejVrZjY0QTBXYlQyL2x3d1c5cEowU01jdzN1cC9TMApzaWoxSmtodFdtRjZuRjFzZGdNZ3dBanVLZE9BK0J0YW50anNXZ2psc0hpbVZpK0FxQmN2ckRIenFwWHV0UjF0CjdpTXk3Vzl6UmdobTlFMXU5MldsWkpsaXdiSXZKb2g3RUFDdU85VXg2cEY3RE40NzJ1TmRNY0Q5NUJCcTRkOWgKb3hXOXVyb2pMbG1pNXBtNFlUZnNjQ3VLTnpQY01pK1hlRWhTWWt4UFB3eXFwYVRsTFZNaHRHVHFqb2lIa0I3eQpNZ0tINU10dVJnb3JMa3lubWl5NXF1WkZaMEs3KzJpdVdMeHUvNGpqRnRhUmZMQTNhcmxXenFCWU95OD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUgUkVRVUVTVC0tLS0tCg==
  node.p12: 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
  node.pem: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURHVENDQWdFQ0ZFaFhnVXA0d2ZJUWtMT0JaWENEMFdrMW5EV2FNQTBHQ1NxR1NJYjNEUUVCQ3dVQU1EOHgKQ3pBSkJnTlZCQVlUQWtSRk1Rd3dDZ1lEVlFRS0RBTkxPRk14RURBT0JnTlZCQXNNQjJ4dloyZHBibWN4RURBTwpCZ05WQkFNTUIzSnZiM1F0WTJFd0hoY05NakF3TmpBMk1EYzBOVFV6V2hjTk1qRXdOakEyTURjME5UVXpXakJUCk1Rc3dDUVlEVlFRR0V3SkVSVEVNTUFvR0ExVUVDZ3dEU3poVE1SQXdEZ1lEVlFRTERBZHNiMmRuYVc1bk1TUXcKSWdZRFZRUUREQnNxTG14dloyZHBibWN1YzNaakxtTnNkWE4wWlhJdWJHOWpZV3d3Z2dFaU1BMEdDU3FHU0liMwpEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUM4VVlvekF3OCttNSszS3lJWjZaTE5odm9QM3U5aGl3STB4Y2dxCmRPZUN5KytYSndnZm1mRW9zcWZrdHpsT2pDK2hQVTJ6SWVCMitoa1RRRzJKYWdYVWJ3TWNHVVlqbFljallpS2gKUEdZWHdYZWw4dERyNUFVVTA0ejZ4UnRpWDJkNm51RWllODhpUWVHaXhhRWJUazNaVHdTQ05LREpyM01WRGsxZwpydkF3OEJXdHVaeW5paWhOcUYrbENSNDdhY0Nibm44SzJUaWtJV3k5bE9QdnZnUjMySWtRbFpBRHpFVFZmcWh2Cjk1dlpxdDM2aHN2UysyVkw1dk51djhqUlE0MHBEMzJmajQ5aS96UDVoODg5S1pLWHFkQVBiV3VQZGVMZ2dSTGkKZVA1UDFtUHFITFluKzgxN09uUGN2M2hLcERjVE8xMW5ycCtGMmpnSnNsU0NvcWFuQWdNQkFBRXdEUVlKS29aSQpodmNOQVFFTEJRQURnZ0VCQUFtOFFuSURnNU9kWDV5YlBjOUFmNkVBUHMwNDNrNHAxTUpEZE0rWmhsV1ZIZDdDCmN5NWpxZG1EQlo5MGxnYitqNTFBNC90RzNISWQyUW5EYnljRUpVeUVMNytoNTZya0REaWlwcUJEdmg2RHR4T0MKNlA1S0M3cWtiMGNhYXdvc2NXdDFDQ0g0VDM3by9DSlNsZEVxUUpiRStneVhIZklYMHdCTVdPYmRoSlhqRUtiZgptaWZWOUZMY3lUamE4UVk3RElrVmxIc2Y5bit0OERTWnAxZVZJVi8yb2JEdWJPdzIvZ0xVWHQwTGVnTWlLOG5QCllya1Brb3c3cGdUSE42Sk5MQzdJMUlCaVhvRmsxYWdISm4zWlpRV09rVzBwSXNSSDlKWlQ5dTYvczNNNytialUKTlhtcENxSVc1enk2aGppS01pMVBtc0RUUlhxNysyYVd3c0dHUk5jPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  transport.conf: UkFOREZJTEUgICAgICAgICAgICAgICA9ICRFTlY6OkhPTUUvLnJuZAoKWyByZXEgXQpkZWZhdWx0X2JpdHMgICAgICAgICAgID0gMjA0OApkZWZhdWx0X2tleWZpbGUgICAgICAgID0ga2V5ZmlsZS5wZW0KZGlzdGluZ3Vpc2hlZF9uYW1lICAgICA9IHJlcV9kaXN0aW5ndWlzaGVkX25hbWUKYXR0cmlidXRlcyAgICAgICAgICAgICA9IHJlcV9hdHRyaWJ1dGVzCnByb21wdCAgICAgICAgICAgICAgICAgPSBubwoKWyByZXFfZGlzdGluZ3Vpc2hlZF9uYW1lIF0KQyAgICAgICAgICAgICAgICAgICAgICA9IERFCk8gICAgICAgICAgICAgICAgICAgICAgPSBLOFMKT1UgICAgICAgICAgICAgICAgICAgICA9IGxvZ2dpbmcKQ04gICAgICAgICAgICAgICAgICAgICA9ICoubG9nZ2luZy5zdmMuY2x1c3Rlci5sb2NhbAoKWyByZXFfYXR0cmlidXRlcyBdCgo=
  elasticsearch.truststore: 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
  http.truststore: MIIELgIBAzCCA+cGCSqGSIb3DQEHAaCCA9gEggPUMIID0DCCA8wGCSqGSIb3DQEHBqCCA70wggO5AgEAMIIDsgYJKoZIhvcNAQcBMCkGCiqGSIb3DQEMAQYwGwQUxvvdu4ySiB0OVnQSqmykRF/4MnsCAwDDUICCA3j8onRyLjEnr9Pi1OWwRP9UJA/yRjde/ebD13BbZSRlHG03tCdNECrv6Pkdh+XdOac4segZE77ZrhkKKfinISSd73z7e3TthJw5FdbWvOF+KeS46BQcgP3WO3fAkAsrA4Dtrncm8nN6ksvQJZu1HlZk6uADXXrEjXMAcjmUqmjOwFgt+H1mG/4Wg/9L0zvG9sk8bdQzfl+UqRCAcXRj3CZIsh9Y8+vLt2jqXclo+ylT09dsFBT45ONgS7q2Mw+kC/rr9M+ktYJ0WuSNbVZaIHGGByxJiHOyuBNmq5daFmvMsFwM/rEWxoFGFFMIvwzyLn/faf5eX+/qPdS7Mr9BRJL6B14Sd1tB1UTtPAazcEvKWyRkH2kll1IvnNd0Nkw8agD5MTK6QHrP8OHPEpEgOO/Arm4xkDHJv4lVwhLJZrl7/YFRLmoyQ6RU6uguOIkpuPiEROx6yG+pmlwyPQ/2R9FRBn0Qcomt9DvcNu68CWAm38CNJ21PEKkqBua8a52PZPeWLM1fXrw379vYF8tAj89tosaMUON2eMX3fC9fU0VPB+N05kmDOl6sybWNiB1gsR4VoghAJYFNfJO/ALcTvnVG9QQFR5tGmbgBxLYs/+5gMTwBZt9S2ckvfeVyi56ORw5vM2zVcg9h9xDKLyt+bDZ5p+ASByeumz92+IkxNAtMQlf7VNPhY8uJ2GEUwBLCpc8+0qoXI7VOK8JPFt8SrjOoplN49Omq5gEUuvJ58P0B86RDJ2kH0NRNYOreHxMndaxbdzt2jmN31nwBIBa1lsm+joGWxn0c3Wsgif20NK6kMf/zBTvClGMyglxKAv9fQ6lQGjRozqjUihMSo0c3ZZrcDZVnw6dS9tuqRdCjsbdWMw7VuPDf5d3dAbIYnQK69AIHpPulU7ISvDfO0we/pi+f14qa3ICv2UhG9t9StaTfH06tIDQKFjn18E+3CtUFbdtTtXxuY9p/jsJQlBHTqfMBLFEFZKL87z9u36MZmiRwyOxywCw2wFEymMasaNJ6uGQNmuKHMBQ1n9FOq+JdnjdvCK1dReqeqMMoZ46aKK3ENANjSMuJZfvA2PAxMbR1e56xJ/JxJst7E/vlT1Vi04es9OTkJMJLnH17nzb8b0ITsIkTzZWYe5VhS8daIsQ8gMe9Q5iUHo8KwaVwCqCGov8eik1aM4gaGAUwPjAhMAkGBSsOAwIaBQAEFMPlFbRp0Gx1ZBAeaepwpuJ5GQxZBBQimK0kOrmNKIyXKU1AUmrUVHAMeQIDAYag
  root-ca-key.pem: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBMkdJbVB3anVHakg1K0IyQit0T2ltMUQwNnE0T2kwSHppcHJaZmJjOEVOdlpBV3dwCkh1MHhSUTVkNStaY0VCMURnb09SY012cldES1lEeWRuN3A0QnFFemRqVVB2SWNxNmxwNzh0K09WWEdQWGlWY1YKQmo5Nkk1UWNlNGZjTTE4Um9icHlXQ2E4Y3kxNTRia1h3S090bnlsRjdkMzkzOFlxNVVTQXQrREVlL3JOM1VWZgpXcHpOeW9wSlhuRldHVzlXUTZraVVkUy9OV25ybjZLK3N2MnNnc0JscUFXMHBVbk5NdnQ5eW9zM1phMkJhMVEvCnovQytWbWNCTW5JVEt0L0gvZDhNMCtabjJVQ01CVVE5amxsNFp6NUUwNkVUekdtUHVMZW5wSmdkdCtwc0E5Z3kKZ3RDUE5XTDhzdGlkODJGR3dyYUtDS2I5Qm5iRWZlYkxEeEJqZ1FJREFRQUJBb0lCQUhBL2NoR3ZBejBwZ2IrWgpKdzFEN2cxZUVMOFE3ZENGdE4zSStGd0R5ckFBSy9GVjkzcm9sbTk1UlhPQUIzQUFqajNOSEl5RDdDRURsZWYrCmpDYTNacXEwdlJXRUVTL1paN09zNC9KTXAvV1dnWC9vWWFxdEVTSVZ1alRHeEk4Tm1TcnBlbG1LTnFZVkNDMzEKQTRKV0prSHplaWdyeVgvazMrbXhBSWppbTJxb09taXVJRHA4eG14TE9MWnNqSGdNY1FoNllJZUlGMi8wZjNWRgpocGNjQzBIZm82azNCcWU3eTZWZDdkN1Nub3A1d1RBc0NFdEYzRkNSNFh3M3duOWdyVkVvSHJoUTRhY2kzUWMwCjNqMmVzbExGc0dBdVdLMi9nVWR5T2tFMVNHRUFMU2ZyR2JJNFJZdnkxTlpBb1dSZ04vUUE5NFFkS0YxTEViei8KVDdpM2RIRUNnWUVBL2xlN3I1cG52RXRPUGpGNkVxOUpQbUhvQTNFWFN3VGw3QWdkVFpOVHI4T01NazQyNnE2Ywo0WUdvODhvckJWSU1wVHpGRWx3ZS9mU0VjYXJhQlJJY0J4aGNSQ0s2aE5NSG1ObUEvY3ZiRWFlc0VFek4ySVNMCm1tRU1vZnRGQzBGUUZ3U2lBbUFVWm9mMUlCTWIxQzNzVkRBMTkrVzRtbjBjTGdPMWd3NUJ6YVVDZ1lFQTJjc1kKdmx5d2xibUJSSUU1dDVHd25hOHpydUk5eS9XdzcwNWFCRmpSN254TXlpL1daVEM4aXUvL21keVcwdFhtOEFCbgo0ZEZxd2hwL2w2cy9QVzRFMUtvSzVnYWwrT0JmVmtRblJJZTI1bU1hQ0JYTEVlekNYakw2U3lGd3N0UkYxK2dWCnVwRHlCK1BORFJZLzh5QmUwRzNpVW9kL2NORlVvWnMwT0ZrUXo2MENnWUVBdk1wV2tHUW1PQWdWemVoZjJscXUKSFZZREovcmI5VjF2WlNJb3pocGJkZzNLbE5TbHd0RlZ0YlhPdVJjSmsrdHhZMzJXTXFpYWdKcnRiSW9MUnRSSQpaYVBaYU9IMlhQMWZtRDlxbGZpcFpaTjJEcXRUNkRHS2hrOGZWMlR4dlFiLzhmWUlZNGI1M1pseGhCdHEvcllQCncvWDlPVU1WSWVkWDhYZmpWYUpSaWRrQ2dZRUFqNDVkYXV5eHdKOGI0OG5CLzR2YWZMV0ZQWnNHM0srL3hwMUEKbkdqblIybExQR0kzMFU5RWw5Z0dCS2J3QzF6TzhoZHlZZGlsby9mUGJtdUVMYnVkRjRoVjByVkRKVDdQMkk3bgp5elloaXM1NzFDUjVUQUZoUkxJWlpQaFB6ckE0c1UzYk5MUmh0RzJsTlNFYldlaFdWdEIzUTZyb2g3YVRNRXFiCkt5RWFBYWtDZ1lFQTI4NVV4WjN2VjJRT0htOGxHbXM4VEROSjBPWUdxcThqWWpibGE5cUNvRkxGMnFOdHI1bzcKV3JnVDNyQSt3OTRnMHU1YU9WZUxBbDZQc1RNdUcvMjJhWEJ3SlZodTRUbkFNTmJjb2kxMEV4MmFSNTk5cVZRUApVSXdqbVFpeG5taHIrM3hqMVh4enpYVmYwVlFrbUl3d3JnQnh6aWJmcG91L1pwSERxRlJPYVZRPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  root-ca.conf: UkFOREZJTEUgICAgICAgICAgICAgICA9ICRFTlY6OkhPTUUvLnJuZAoKWyByZXEgXQpkZWZhdWx0X2JpdHMgICAgICAgICAgID0gMjA0OApkZWZhdWx0X2tleWZpbGUgICAgICAgID0ga2V5ZmlsZS5wZW0KZGlzdGluZ3Vpc2hlZF9uYW1lICAgICA9IHJlcV9kaXN0aW5ndWlzaGVkX25hbWUKYXR0cmlidXRlcyAgICAgICAgICAgICA9IHJlcV9hdHRyaWJ1dGVzCnByb21wdCAgICAgICAgICAgICAgICAgPSBubwoKWyByZXFfZGlzdGluZ3Vpc2hlZF9uYW1lIF0KQyAgICAgICAgICAgICAgICAgICAgICA9IERFCk8gICAgICAgICAgICAgICAgICAgICAgPSBLOFMKT1UgICAgICAgICAgICAgICAgICAgICA9IGxvZ2dpbmcKQ04gICAgICAgICAgICAgICAgICAgICA9IHJvb3QtY2EKClsgcmVxX2F0dHJpYnV0ZXMgXQ==
  root-ca.pem: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCVENDQWUwQ0ZEa3lBcTlRMlpMTzcrY1ZKY08za2x1QTJKL2pNQTBHQ1NxR1NJYjNEUUVCQ3dVQU1EOHgKQ3pBSkJnTlZCQVlUQWtSRk1Rd3dDZ1lEVlFRS0RBTkxPRk14RURBT0JnTlZCQXNNQjJ4dloyZHBibWN4RURBTwpCZ05WQkFNTUIzSnZiM1F0WTJFd0hoY05NakF3TmpBMk1EYzBOVFV6V2hjTk16QXdOakEwTURjME5UVXpXakEvCk1Rc3dDUVlEVlFRR0V3SkVSVEVNTUFvR0ExVUVDZ3dEU3poVE1SQXdEZ1lEVlFRTERBZHNiMmRuYVc1bk1SQXcKRGdZRFZRUUREQWR5YjI5MExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQQoyR0ltUHdqdUdqSDUrQjJCK3RPaW0xRDA2cTRPaTBIemlwclpmYmM4RU52WkFXd3BIdTB4UlE1ZDUrWmNFQjFECmdvT1JjTXZyV0RLWUR5ZG43cDRCcUV6ZGpVUHZJY3E2bHA3OHQrT1ZYR1BYaVZjVkJqOTZJNVFjZTRmY00xOFIKb2JweVdDYThjeTE1NGJrWHdLT3RueWxGN2QzOTM4WXE1VVNBdCtERWUvck4zVVZmV3B6TnlvcEpYbkZXR1c5VwpRNmtpVWRTL05XbnJuNksrc3Yyc2dzQmxxQVcwcFVuTk12dDl5b3MzWmEyQmExUS96L0MrVm1jQk1uSVRLdC9ICi9kOE0wK1puMlVDTUJVUTlqbGw0Wno1RTA2RVR6R21QdUxlbnBKZ2R0K3BzQTlneWd0Q1BOV0w4c3RpZDgyRkcKd3JhS0NLYjlCbmJFZmViTER4QmpnUUlEQVFBQk1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQWVKLytqQXl0VAp2bUxkRFl4M0hjVmRmUmcwcWRBTWczUmgrdXh4MDRubDd2UnZXbWgya2dQSm9xUEdhb0VPWXpqdTNGOUgrNlcxClIrbFBwQ0h3UXk0YnNYcVBwTjBJWXBuYVc5eU81NFBpZmcyekVwc3YvY0VnZWVUcno0SGFYUk5XZmtpaTVuVnMKWXVBcDRWaXBNcER6eHBCTk5GL1VtWTR6R3k2VjNlWXQvZVprTlp4S3BLb25YYjlqdXlmbU5qTis1TVJ2ZEYwWgpmTlk0T0FOdE1zcTl3Q0xjeGU2RHJjamtDYy9VY2VtVXBhVHBoWi9qeDF2b3J5alVaN1JTZjdwMHk5Lzg4OVY0CnR6VWgvMXBxQUJtWWIzbFQ0OTdzdzA2NjFnbjFiVGIxNnc4RzlzakljNkJJNUNkeE83b0VTWThIdkdCKzI5SzcKak9MZEh4Qjl4Q2FqCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  admin-key.pem: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRREl5RVlpTGNZVkRXZHQKTE9JWEZOZnZRSzVVNGh1Qlk3UHF1ZWR6UldkWCtManVrK2hxZFQ5MWVXUnpFamVJRVQ3M3VQNHVDalhQVGpIaQp4TlN6TVJKNGJSMmwzRzN1OHJjT3VrQTc4NGVvNWViK2dYbHVCZllUd3Y1bnZvWEptS2NoMjhlVm1pMXMvNXdrCnVqaHBhWTAzK29ERFZQMlpDZ1ZhVXdvVi9XTCtXZGpBL3JpaUEwaHNxWFY3bExZWVVGekc0Q0RHWEZUalZXRk0Kc2p3REU3VXdmRVlqNW0wU1poRTM3V1l5bGZqRTczdHZseVlBYjdGTVE0M3JOSjQ4WS90UC9aSWI1U0plUTdxSwpDbnN2Wmc0RzZzZng5cjBLTlJsNWlxTkFVMzgrdzM5STFRNGtsMEl6b1FDT1lWUXcxMnFEd3NOWHozdnJZczNLCmtneGlXWXBuQWdNQkFBRUNnZ0VCQUw0T2RmVGNoMmhlSzh6NGMzdU55Mms2UE1zMHpQeUp1RUUwZ0pabzJBNDUKN2pSSDVmVC96M1lQMXJubVFKS1lZSloxa29WYVBOMWpFMjJwQy80ak1XeTFQUjlIclBoRzRHa2NmTGxES09NRAozTWlGSHNDNis5aHcrQWlVSEdoY0M3ak5KZnZDMmNVWG9HSlR0QnAwUTZ6OWZ1MW5nalpmZWZtcUtSM3ZvTWxKCjdkZlhPQzBsYXpXU29razlIaWxVK2xyak9uQ0VIK25jalUvb01TUDg4Z0M2NjdzRW5yQnFlLzhVcVd4MzdzRmQKUDVncmxmaGNjeWEwZHR4eEhGS0drT0NiVkpwZmw2Unc2b0lmbk1nWTBIbVVDejVwVXBVVmxSbmV6U1RnOHVxMQoxbE5odDhqdU1MMWEzSkswbE5xWFJhcGpvTHBIS3ErazJOVkF5WlBVQmlFQ2dZRUE1WVppeFYvNzFqVVhpVUhjClduMlo2b2xManVpdG9CYVFyU1hub0sxbURvRnBOYjVwQ3F6M1AvNGFXSkpDNUJyNWJMb3d1VFV5YkIvWXlKSSsKMUp4bkNnaHRiRStRUms0ZjkxbEpoNlhiOVRiRk9HWEFFTVV5Z05RdWIvWGNCeG13UTg1d3NUWGZ4SVJ4cHNKegp1Y0kvZlU0d0FqQ09HTDh6K3JKMFpqeVFJRVVDZ1lFQTMvRW1rblpJUDlmZnZEVmRhTVEydEJHM1J3OHhCZzJyCmtWSWhwRGJteWQ1eHh0WFU5Z2JIamdWeVNpOGlNUWlHOHF5MFhDd0tUTTJTY2plQVg1YWlLTElIaU5TVmZhMngKUHBCM1p4V1RDb1pvNjZrZE8zUXpvTkdseW1TakxmTUdNQm1kTHBaeXQ4R1habXJxRnRRb1g5TG9ocklnR3pGRQowMnBwSjU5Vm1Mc0NnWUFIN2RTTHJQMHVNVGRXN29lR09NQ1FjWjNDbWhjbGFLSW0yU0JmVko0cDhoNklWTU9jCk1zMTMwSGRvaCtUM3JGYmhncTBjT05JOUdmeUxNVUlxWmh6SkkvRmp4SHZmY2VONDBBVFNRdENPY0Ezd0hOTzkKd0pJMkVSNXBqN3pDSWdrTXpwem1BazV3bzRLcG1CNFhWTGFNeFo2eTlLcDBBR2J6U2liclFUeFpZUUtCZ0M0eQp3WkpWZEhJM1JxQzlJWmdMWW4yamFmdnUxbDQ1VTd1WEJmbXFtZEhyWWUxekQ0dnh1aGxDWm1HSGQ3WkYzQkVVCkwrRVQ5TXdEWE1MVFVGaG42dXdhVGhPY1IzcTE2bXJOd3RReFR6Uk1wamgzbXVBNUNLMlVrbTgrYzZ0M0J6L0YKQ1BnamNXY1hPUFNYK2RMYjBiaHkraVZQZWZBaUtlQ3pneDM1Y044aEFvR0FMNWdybjZZQjluS3EwbjJvaG51QgpBWEkvb3ZaRVJicGlyUXRSWFJNMkg4S3NXUHhZbUhtWFR0VHlvQlJRU2pES1RJNzd1RHk5RHdQNHRuL3hVcktWClpJaGFYVjU0TjR1V1FReHAwbXRoZWVkRWhEUE9HcG0rQ1BMOHBtZU5oYnpDUmxZNkRMSVBYR09jdHlZTk5palEKcnNRbnR3RUtnYStublQ2Tk1DaWZsUHc9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
  admin.conf: UkFOREZJTEUgICAgICAgICAgICAgICA9ICRFTlY6OkhPTUUvLnJuZAoKWyByZXEgXQpkZWZhdWx0X2JpdHMgICAgICAgICAgID0gMjA0OApkZWZhdWx0X2tleWZpbGUgICAgICAgID0ga2V5ZmlsZS5wZW0KZGlzdGluZ3Vpc2hlZF9uYW1lICAgICA9IHJlcV9kaXN0aW5ndWlzaGVkX25hbWUKYXR0cmlidXRlcyAgICAgICAgICAgICA9IHJlcV9hdHRyaWJ1dGVzCnByb21wdCAgICAgICAgICAgICAgICAgPSBubwoKWyByZXFfZGlzdGluZ3Vpc2hlZF9uYW1lIF0KQyAgICAgICAgICAgICAgICAgICAgICA9IERFCk8gICAgICAgICAgICAgICAgICAgICAgPSBLOFMKT1UgICAgICAgICAgICAgICAgICAgICA9IGxvZ2dpbmcKQ04gICAgICAgICAgICAgICAgICAgICA9IGFkbWluCgpbIHJlcV9hdHRyaWJ1dGVzIF0KCg==
  admin.csr: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0KTUlJQ2dqQ0NBV29DQVFBd1BURUxNQWtHQTFVRUJoTUNSRVV4RERBS0JnTlZCQW9NQTBzNFV6RVFNQTRHQTFVRQpDd3dIYkc5bloybHVaekVPTUF3R0ExVUVBd3dGWVdSdGFXNHdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRREl5RVlpTGNZVkRXZHRMT0lYRk5mdlFLNVU0aHVCWTdQcXVlZHpSV2RYK0xqdWsraHEKZFQ5MWVXUnpFamVJRVQ3M3VQNHVDalhQVGpIaXhOU3pNUko0YlIybDNHM3U4cmNPdWtBNzg0ZW81ZWIrZ1hsdQpCZllUd3Y1bnZvWEptS2NoMjhlVm1pMXMvNXdrdWpocGFZMDMrb0REVlAyWkNnVmFVd29WL1dMK1dkakEvcmlpCkEwaHNxWFY3bExZWVVGekc0Q0RHWEZUalZXRk1zandERTdVd2ZFWWo1bTBTWmhFMzdXWXlsZmpFNzN0dmx5WUEKYjdGTVE0M3JOSjQ4WS90UC9aSWI1U0plUTdxS0Nuc3ZaZzRHNnNmeDlyMEtOUmw1aXFOQVUzOCt3MzlJMVE0awpsMEl6b1FDT1lWUXcxMnFEd3NOWHozdnJZczNLa2d4aVdZcG5BZ01CQUFHZ0FEQU5CZ2txaGtpRzl3MEJBUXNGCkFBT0NBUUVBSndyQ25FdEROdHFLM0hDV016QUVranlKQjNkZXc4TTEyejRsb1JzL0FLK0pQTFhvd2RoZ2lqS2wKVFBaVTBjNFhkQU9RWVpNNUJFRTdOZmtnLzFNR0NqVXVWVDdtdmV4VDRLY2ZvVUFQbkRlc05JWjJNZTNZVzh1dApQUXZoajhONW0xWXVVZUVBWldOZW1kdk41UDl0dVZnd0laRWpDYlp0bDMzcHB2bmF6UXN0ZlJOL1M5M0RRSEJwClhiU0pQUGlVUFFGS2g2akk5RkJLZmQvN3VxL1o4UVNmWWx3QXBRSW9sRDNtU1V2d255cTdmYks2bXJ0T2k4dnkKcXBpZlYvNmxIZ0RraC9MYzFPS2FzalBxZmxrYmovZ09SYUFENnh5WTBxNTNJOWlDeEpBTEtqMEhMeDRKS3V1RwpCdldrdFVlWkx6N2ZxTW13Tmh2RGdGMTZMdWhqZWc9PQotLS0tLUVORCBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0K
  admin.p12: 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
  admin.pem: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURBekNDQWVzQ0ZFaFhnVXA0d2ZJUWtMT0JaWENEMFdrMW5EV1pNQTBHQ1NxR1NJYjNEUUVCQ3dVQU1EOHgKQ3pBSkJnTlZCQVlUQWtSRk1Rd3dDZ1lEVlFRS0RBTkxPRk14RURBT0JnTlZCQXNNQjJ4dloyZHBibWN4RURBTwpCZ05WQkFNTUIzSnZiM1F0WTJFd0hoY05NakF3TmpBMk1EYzBOVFV6V2hjTk1qRXdOakEyTURjME5UVXpXakE5Ck1Rc3dDUVlEVlFRR0V3SkVSVEVNTUFvR0ExVUVDZ3dEU3poVE1SQXdEZ1lEVlFRTERBZHNiMmRuYVc1bk1RNHcKREFZRFZRUUREQVZoWkcxcGJqQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU1qSQpSaUl0eGhVTloyMHM0aGNVMSs5QXJsVGlHNEZqcytxNTUzTkZaMWY0dU82VDZHcDFQM1Y1WkhNU040Z1JQdmU0Ci9pNEtOYzlPTWVMRTFMTXhFbmh0SGFYY2JlN3l0dzY2UUR2emg2amw1djZCZVc0RjloUEMvbWUraGNtWXB5SGIKeDVXYUxXei9uQ1M2T0dscGpUZjZnTU5VL1prS0JWcFRDaFg5WXY1WjJNRCt1S0lEU0d5cGRYdVV0aGhRWE1iZwpJTVpjVk9OVllVeXlQQU1UdFRCOFJpUG1iUkptRVRmdFpqS1YrTVR2ZTIrWEpnQnZzVXhEamVzMG5qeGorMC85CmtodmxJbDVEdW9vS2V5OW1EZ2JxeC9IMnZRbzFHWG1LbzBCVGZ6N0RmMGpWRGlTWFFqT2hBSTVoVkREWGFvUEMKdzFmUGUrdGl6Y3FTREdKWmltY0NBd0VBQVRBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQWp0RDI0M0pYdE0xbgowaEYxUFFwdk53V09tWFlVdFU3YTBKamo4NE0rTTBMK0VwZytVWWZHT1o0ei9aOVBGZFYrMDZSejA2cVlIWW9hCkxqbitSam5ab1h6UzQ1Yldabi80K1FSTGZTQUgwZmJhMHBWWnlQYmM1cC9zT2hOWlh5K0FlOG5EMGZxeW1Ud1UKMEloMUJSeW9nQ0FnS3pnNENTOGwveWJCUzREc3RiSUJ3TUMvOUY0eC9VUWFsRHJJc0lDRlY2UzJHSW9TMU82VQpvWHBjNzBzZTdZM3VrOWZOeDVzaWhCVTlyamNpdldnOGxlMnRvS09qVzBLNUVmSlVXZi9MZnRPOVVzMGlPeHhFCkEwVEdkcllTWlB0cU9McXhacC9welkyZTAvSnhGNFVOMDl2SzJ2cEJoRmtJODYxeDFzN1ZzOUR6UmdIcGpmRlYKWnNmN1V1ekhmUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  elk-rest-key.pem: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2Z0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktnd2dnU2tBZ0VBQW9JQkFRRFRGRFNKZ01hQUlhN3oKckJSQVIwd2cyZGltUmZFYmZocFVHMWpxVWhxeEZiN3NsUDJYOU00VzgvMmJsVS81QmlPbXduL0VPZzlZYVpYTAo3YjBPREdZekdUS25pUE12R25EOGVrRXRESXBvYlMyN05FUVpocncwSzZwRndYd1VkK0QyZDh0TmgzNFhGdWdECnZTelZEODFCOTJGMUhkZDBXbUloUlpLT2U1S29nQjNISDVMUE4zOWo1aTNQaStEc3VtQWJQTVczM1d1RE1jcC8KeWIvQ3lVL1V3azFhNVFPcncyRzRFbDFaaEx5eE9JVUY1YUViTlJLKyt6bEhaeHByNUR4ai80RmRmZzdOdmVOcgpIa1R3OUsxYTZtaENrMDU2RFhPczNBWGdaKzVVSWlnVnhaT2tjSkxPRlhZczZFaVp3S0Zkb2o5b1NrT3pHOWxQCkp2dzdtRzVkQWdNQkFBRUNnZ0VCQUo1YnVrNnUzajJqQjY2b20wamVOSzh3d09sOTc3WEFsZUFqNUVGbjk3NkQKb2dtOGZjVlRWSXJENHJDbkJLaS9nbC9KN0RFN25lZW16MHQvd1NhWkJ0T3ZRK0dOVFdVNVlTc0tUWHVPdlFnNwpZT1BpQW5Wa01DNnowN3NodmdWZEt0bStaamgwUHBUMENuMURvQzc0Ky9WUnN6dzZkenBEMVB0QlJ3SytrdmoyClNJZ0pDUmN1a1kyVXhFbjN2RnpjMU9kc3d4amFRcVIvaXd2KzV6OEZqQnkrS0NnMjdqMlBYZ3NOc1RTVC9xZ2sKZkkrYVVNRlNNVmxMUlZYTDdYNVFEbFhLd2VDb3J6QTNUVml4MGVrbDYzZDg3aUZ1S2g3YmdXdERyOVA1Qi9TSQpNOXZobVhyZCtSaG9qWTZuLy9wK3crNmtPWEEyQUhjOXcvQW1iRlpzd2NFQ2dZRUE3RnhNT2J5OCthNjdFSGhqCmhzUCtaK3RhZVJzYzFRS1JlME9GZjYrOHJPZVFPdEtYNi9EamRWaE1ZV0tIVkxGU3V6b2pIcmRVYkpLUWJtbHYKSm5FY2VvZnNkbnVvdHc0TUdWU1NjMk9YSHpJOXZrVHFNQ2xKUElHTFhsUi9PajNtcjloR0NERFdGNU5rdWxLUwp3ODBUY2t3cUJnZGhsQlJxTTRhTnc1OGsrYmNDZ1lFQTVKNGlVUDJIWTZmT2QrYWhza1h0Unc1Tml2cThSNGpjCnRYbXgzVWkzR3pWenNUS1ZjOEtOSTgxQ2krZjN1WDVCdTl6TlFRUjZBSUE5cGNwTlBkR2p5Vk9ubnZEd3F3STQKN0w1VVNBb3pZTnFTcEtyMDgwTDkzS25Vb3hkbW1iRURzYk5EeVVoK3paWDhRdkFob0VjUFU2YzJOQnR2T05idgpVYjBNWGwyQjZJc0NnWUVBazVGb2tkK3hpSjI3OHlPRzEvd0VHVE9Lei9QS2czOVAvMHAvemVHVmhjb3BkV0JJCk02bTVDV2x3ZnBpNmIza3FjdlJ3T3R3eEhIeEJLbjR2UkN2NG9OTytJWmRCRmREeVl0bzNlVTFqYTdtOWJNNnYKL0JPNndza0tqNEZuMGFBV0tCRjZYK0RGdWdCdk1oa2R3cHVHR2FWTjAyZkdWMktMajlIaExwSnN6bThDZ1lCRQpJTVBGTXVoSDBGZjg3eU84aG80aElLZ0hCSlZiRS9RQnVKUkNoMHJadHVJVktpZlRhV1M2Q0k4T05rQmliTGVXCkRrUzBYV3NsL3hGZitKdHdFcXNtY2VGL3dmbFdYTUV0KzhJTi9jdzF6cXpvbVhHSmxLc21PUTMrMUJobE1KVVQKUFlLejF3RENyekdQbVJQTU9hRGRvdlRLTG1yRW0zaVIrUzVZYUxFdjVRS0JnSG5sUWNnRE9mT01QN2h1eXpnegprcDMvRzN0UldHVjFBdWkyeTFOWDEyVW5vT0lrcUx1RHY5ako0amUzOE1Eem1YNXdkRmpwck81TUhhaVR0cVF6CkNYZ2F1ZHM2S3FEcHlzT0xWVGdhQ3d4bkEvaE9IUXFqbkhKTWVPaGxQSVVrNEpSZHdsSU9vQm9TT0hwUVZhQmoKR0Vqd2JYK1cwSzlISENCNmJwUjBWWTROCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
  elk-rest.conf: UkFOREZJTEUgICAgICAgICAgICAgICA9ICRFTlY6OkhPTUUvLnJuZAoKWyByZXEgXQpkZWZhdWx0X2JpdHMgICAgICAgICAgID0gMjA0OApkZWZhdWx0X2tleWZpbGUgICAgICAgID0ga2V5ZmlsZS5wZW0KZGlzdGluZ3Vpc2hlZF9uYW1lICAgICA9IHJlcV9kaXN0aW5ndWlzaGVkX25hbWUKYXR0cmlidXRlcyAgICAgICAgICAgICA9IHJlcV9hdHRyaWJ1dGVzCnByb21wdCAgICAgICAgICAgICAgICAgPSBubwoKWyByZXFfZGlzdGluZ3Vpc2hlZF9uYW1lIF0KQyAgICAgICAgICAgICAgICAgICAgICA9IERFCk8gICAgICAgICAgICAgICAgICAgICAgPSBLOFMKT1UgICAgICAgICAgICAgICAgICAgICA9IGxvZ2dpbmcKQ04gICAgICAgICAgICAgICAgICAgICA9IGVsay1jbGllbnQubG9nZ2luZy5zdmMuY2x1c3Rlci5sb2NhbAoKWyByZXFfYXR0cmlidXRlcyBd
  elk-rest.csr: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0KTUlJQ29UQ0NBWWtDQVFBd1hERUxNQWtHQTFVRUJoTUNSRVV4RERBS0JnTlZCQW9NQTBzNFV6RVFNQTRHQTFVRQpDd3dIYkc5bloybHVaekV0TUNzR0ExVUVBd3drWld4ckxXTnNhV1Z1ZEM1c2IyZG5hVzVuTG5OMll5NWpiSFZ6CmRHVnlMbXh2WTJGc01JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBMHhRMGlZREcKZ0NHdTg2d1VRRWRNSU5uWXBrWHhHMzRhVkJ0WTZsSWFzUlcrN0pUOWwvVE9GdlA5bTVWUCtRWWpwc0oveERvUApXR21WeSsyOURneG1NeGt5cDRqekx4cHcvSHBCTFF5S2FHMHR1elJFR1lhOE5DdXFSY0Y4RkhmZzluZkxUWWQrCkZ4Ym9BNzBzMVEvTlFmZGhkUjNYZEZwaUlVV1NqbnVTcUlBZHh4K1N6emQvWStZdHo0dmc3THBnR3p6RnQ5MXIKZ3pIS2Y4bS93c2xQMU1KTld1VURxOE5odUJKZFdZUzhzVGlGQmVXaEd6VVN2dnM1UjJjYWErUThZLytCWFg0Twp6YjNqYXg1RThQU3RXdXBvUXBOT2VnMXpyTndGNEdmdVZDSW9GY1dUcEhDU3poVjJMT2hJbWNDaFhhSS9hRXBECnN4dlpUeWI4TzVodVhRSURBUUFCb0FBd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFEMWc4cTNyTUlmYmtGQU0KTGh4OVVnMFgwMjhHOEN3eHZxcGJ0NVZCRzliNFFiZXpJQkFoR09TZTBlblNkb1pvcGp0VUQ1QVA5cDl5cDI3bApEQis4czVBRTJkOGVRTHZud1I1MHgzdVg4NXBRcW03c1kvV0UwQU5rN0MzZTViR1RSMTB2endIL2gwK0NOSkxlCkkvbWJmK3piQkVCZVl5TG1QdWZuTmVIdGNzaE9sa2gycmFDS2Ixc2lic2tkblJYa1plcHRPYWtCQnU5a2N3eUQKU2N4ODJ0dFhYSTY1TnlPS2s2TjkwK2loOVA3OWwwTlZBUDc5MmpFWGxVT0kvaEkrWVZYaGlzTldCTXF5M3VQUQp6eVgrUlZhMm94YklNeXpzTnpNSnRNS2FwQlFta3RRVHp2ZkVOUUtXVXd1WDNlWHAvWW5NbUU5N3hHdzg0TmkvCjJLcmI5M2c9Ci0tLS0tRU5EIENFUlRJRklDQVRFIFJFUVVFU1QtLS0tLQo=
  elk-rest.p12: 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
  elk-rest.pem: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJakNDQWdvQ0ZFaFhnVXA0d2ZJUWtMT0JaWENEMFdrMW5EV2JNQTBHQ1NxR1NJYjNEUUVCQ3dVQU1EOHgKQ3pBSkJnTlZCQVlUQWtSRk1Rd3dDZ1lEVlFRS0RBTkxPRk14RURBT0JnTlZCQXNNQjJ4dloyZHBibWN4RURBTwpCZ05WQkFNTUIzSnZiM1F0WTJFd0hoY05NakF3TmpBMk1EYzBOVFV6V2hjTk1qRXdOakEyTURjME5UVXpXakJjCk1Rc3dDUVlEVlFRR0V3SkVSVEVNTUFvR0ExVUVDZ3dEU3poVE1SQXdEZ1lEVlFRTERBZHNiMmRuYVc1bk1TMHcKS3dZRFZRUUREQ1JsYkdzdFkyeHBaVzUwTG14dloyZHBibWN1YzNaakxtTnNkWE4wWlhJdWJHOWpZV3d3Z2dFaQpNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURURkRTSmdNYUFJYTd6ckJSQVIwd2cyZGltClJmRWJmaHBVRzFqcVVocXhGYjdzbFAyWDlNNFc4LzJibFUvNUJpT213bi9FT2c5WWFaWEw3YjBPREdZekdUS24KaVBNdkduRDhla0V0RElwb2JTMjdORVFaaHJ3MEs2cEZ3WHdVZCtEMmQ4dE5oMzRYRnVnRHZTelZEODFCOTJGMQpIZGQwV21JaFJaS09lNUtvZ0IzSEg1TFBOMzlqNWkzUGkrRHN1bUFiUE1XMzNXdURNY3AveWIvQ3lVL1V3azFhCjVRT3J3Mkc0RWwxWmhMeXhPSVVGNWFFYk5SSysremxIWnhwcjVEeGovNEZkZmc3TnZlTnJIa1R3OUsxYTZtaEMKazA1NkRYT3MzQVhnWis1VUlpZ1Z4Wk9rY0pMT0ZYWXM2RWlad0tGZG9qOW9Ta096RzlsUEp2dzdtRzVkQWdNQgpBQUV3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUgxOVdiN3NpZU4yUDZ1Rk5UN0lxdW12b3JGc2RmMWdwUy96CjVqdUF1emwvYUpacWRTU3ZtY3BwSCtjZHk0aTN0eUNFdkZ1ZlByZE9TdFAyYjY3ZW1UZW0xcHFmRlU5S2thcVUKRGRhSGhmZElEL2V6ZFpWYzBCYkpLNXhYT0hPMitKOFRmUFhQcmR1Q2R3YWhhbGZlamZXZHJudUF6WWlZQTZCbgpNSXBRWk9zMDFZaFRaTXUzOWJBOENsSXlUN0JuWEdoUjFESWtmZjlMODdHdkIyMmRySUQ2T2R5djZwM1BadWN0CnhRdENlbzNVa2wxYThNZmlBYy9nSHJobnFzT1QySmJmWlpJeDZoWU0yak80bDRFOUhSNWdRMDR0MFVRb29hYzQKTTBvaDc3eUlzcjVEOE1BdUJPZ1h6WjNEQ3JvVXlmUDZyTmNiU1dLUHh5THo5UXJuZ3RZPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
---
# Source: kubernetes-logging/templates/elasticsearch/es-securityconfig-sec.yaml
apiVersion: v1
kind: Secret
metadata:
  name: elk-securityconfig
  labels:     
    app: elk-kubernetes-logging
    chart: kubernetes-logging-0.8.0
    release: elk
    heritage: Helm
type: Opaque
data:  
  action_groups.yml: |-
    X21ldGE6CiAgdHlwZTogImFjdGlvbmdyb3VwcyIKICBjb25maWdfdmVyc2lvbjogMgo=
  
  config.yml: |-
    LS0tCgojIFRoaXMgaXMgdGhlIG1haW4gT3BlbiBEaXN0cm8gU2VjdXJpdHkgY29uZmlndXJhdGlvbiBmaWxlIHdoZXJlIGF1dGhlbnRpY2F0aW9uCiMgYW5kIGF1dGhvcml6YXRpb24gaXMgZGVmaW5lZC4KIwojIFlvdSBuZWVkIHRvIGNvbmZpZ3VyZSBhdCBsZWFzdCBvbmUgYXV0aGVudGljYXRpb24gZG9tYWluIGluIHRoZSBhdXRoYyBvZiB0aGlzIGZpbGUuCiMgQW4gYXV0aGVudGljYXRpb24gZG9tYWluIGlzIHJlc3BvbnNpYmxlIGZvciBleHRyYWN0aW5nIHRoZSB1c2VyIGNyZWRlbnRpYWxzIGZyb20KIyB0aGUgcmVxdWVzdCBhbmQgZm9yIHZhbGlkYXRpbmcgdGhlbSBhZ2FpbnN0IGFuIGF1dGhlbnRpY2F0aW9uIGJhY2tlbmQgbGlrZSBBY3RpdmUgRGlyZWN0b3J5IGZvciBleGFtcGxlLgojCiMgSWYgbW9yZSB0aGFuIG9uZSBhdXRoZW50aWNhdGlvbiBkb21haW4gaXMgY29uZmlndXJlZCB0aGUgZmlyc3Qgb25lIHdoaWNoIHN1Y2NlZWRzIHdpbnMuCiMgSWYgYWxsIGF1dGhlbnRpY2F0aW9uIGRvbWFpbnMgZmFpbCB0aGVuIHRoZSByZXF1ZXN0IGlzIHVuYXV0aGVudGljYXRlZC4KIyBJbiB0aGlzIGNhc2UgYW4gZXhjZXB0aW9uIGlzIHRocm93biBhbmQvb3IgdGhlIEhUVFAgc3RhdHVzIGlzIHNldCB0byA0MDEuCiMKIyBBZnRlciBhdXRoZW50aWNhdGlvbiBhdXRob3JpemF0aW9uIChhdXRoeikgd2lsbCBiZSBhcHBsaWVkLiBUaGVyZSBjYW4gYmUgemVybyBvciBtb3JlIGF1dGhvcml6ZXJzIHdoaWNoIGNvbGxlY3QKIyB0aGUgcm9sZXMgZnJvbSBhIGdpdmVuIGJhY2tlbmQgZm9yIHRoZSBhdXRoZW50aWNhdGVkIHVzZXIuCiMKIyBCb3RoLCBhdXRoYyBhbmQgYXV0aCBjYW4gYmUgZW5hYmxlZC9kaXNhYmxlZCBzZXBhcmF0ZWx5IGZvciBSRVNUIGFuZCBUUkFOU1BPUlQgbGF5ZXIuIERlZmF1bHQgaXMgdHJ1ZSBmb3IgYm90aC4KIyAgICAgICAgaHR0cF9lbmFibGVkOiB0cnVlCiMgICAgICAgIHRyYW5zcG9ydF9lbmFibGVkOiB0cnVlCiMKIyBGb3IgSFRUUCBpdCBpcyBwb3NzaWJsZSB0byBhbGxvdyBhbm9ueW1vdXMgYXV0aGVudGljYXRpb24uIElmIHRoYXQgaXMgdGhlIGNhc2UgdGhlbiB0aGUgSFRUUCBhdXRoZW50aWNhdG9ycyB0cnkgdG8KIyBmaW5kIHVzZXIgY3JlZGVudGlhbHMgaW4gdGhlIEhUVFAgcmVxdWVzdC4gSWYgY3JlZGVudGlhbHMgYXJlIGZvdW5kIHRoZW4gdGhlIHVzZXIgZ2V0cyByZWd1bGFybHkgYXV0aGVudGljYXRlZC4KIyBJZiBub25lIGNhbiBiZSBmb3VuZCB0aGUgdXNlciB3aWxsIGJlIGF1dGhlbnRpY2F0ZWQgYXMgYW4gImFub255bW91cyIgdXNlci4gVGhpcyB1c2VyIGhhcyBhbHdheXMgdGhlIHVzZXJuYW1lICJhbm9ueW1vdXMiCiMgYW5kIG9uZSByb2xlIG5hbWVkICJhbm9ueW1vdXNfYmFja2VuZHJvbGUiLgojIElmIHlvdSBlbmFibGUgYW5vbnltb3VzIGF1dGhlbnRpY2F0aW9uIGFsbCBIVFRQIGF1dGhlbnRpY2F0b3JzIHdpbGwgbm90IGNoYWxsZW5nZS4KIwojCiMgTm90ZTogSWYgeW91IGRlZmluZSBtb3JlIHRoYW4gb25lIEhUVFAgYXV0aGVudGljYXRvcnMgbWFrZSBzdXJlIHRvIHB1dCBub24tY2hhbGxlbmdpbmcgYXV0aGVudGljYXRvcnMgbGlrZSAicHJveHkiIG9yICJjbGllbnRjZXJ0IgojIGZpcnN0IGFuZCB0aGUgY2hhbGxlbmdpbmcgb25lIGxhc3QuCiMgQmVjYXVzZSBpdCdzIG5vdCBwb3NzaWJsZSB0byBjaGFsbGVuZ2UgYSBjbGllbnQgd2l0aCB0d28gZGlmZmVyZW50IGF1dGhlbnRpY2F0aW9uIG1ldGhvZHMgKGZvciBleGFtcGxlCiMgS2VyYmVyb3MgYW5kIEJhc2ljKSBvbmx5IG9uZSBjYW4gaGF2ZSB0aGUgY2hhbGxlbmdlIGZsYWcgc2V0IHRvIHRydWUuIFlvdSBjYW4gY29wZSB3aXRoIHRoaXMgc2l0dWF0aW9uCiMgYnkgdXNpbmcgcHJlLWF1dGhlbnRpY2F0aW9uLCBlLmcuIHNlbmRpbmcgYSBIVFRQIEJhc2ljIGF1dGhlbnRpY2F0aW9uIGhlYWRlciBpbiB0aGUgcmVxdWVzdC4KIwojIERlZmF1bHQgdmFsdWUgb2YgdGhlIGNoYWxsZW5nZSBmbGFnIGlzIHRydWUuCiMKIwojIEhUVFAKIyAgIGJhc2ljIChjaGFsbGVuZ2luZykKIyAgIHByb3h5IChub3QgY2hhbGxlbmdpbmcsIG5lZWRzIHhmZikKIyAgIGtlcmJlcm9zIChjaGFsbGVuZ2luZykKIyAgIGNsaWVudGNlcnQgKG5vdCBjaGFsbGVuZ2luZywgbmVlZHMgaHR0cHMpCiMgICBqd3QgKG5vdCBjaGFsbGVuZ2luZykKIyAgIGhvc3QgKG5vdCBjaGFsbGVuZ2luZykgI0RFUFJFQ0FURUQsIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSB2ZXJzaW9uLgojICAgICAgICAgICAgICAgICAgICAgICAgICBob3N0IGJhc2VkIGF1dGhlbnRpY2F0aW9uIGlzIGNvbmZpZ3VyYWJsZSBpbiByb2xlc19tYXBwaW5nCgojIEF1dGhjCiMgICBpbnRlcm5hbAojICAgbm9vcAojICAgbGRhcAoKIyBBdXRoegojICAgbGRhcAojICAgbm9vcAoKCgpfbWV0YToKICB0eXBlOiAiY29uZmlnIgogIGNvbmZpZ192ZXJzaW9uOiAyCgpjb25maWc6CiAgZHluYW1pYzoKICAgICMgU2V0IGZpbHRlcmVkX2FsaWFzX21vZGUgdG8gJ2Rpc2FsbG93JyB0byBmb3JiaWQgbW9yZSB0aGFuIDIgZmlsdGVyZWQgYWxpYXNlcyBwZXIgaW5kZXgKICAgICMgU2V0IGZpbHRlcmVkX2FsaWFzX21vZGUgdG8gJ3dhcm4nIHRvIGFsbG93IG1vcmUgdGhhbiAyIGZpbHRlcmVkIGFsaWFzZXMgcGVyIGluZGV4IGJ1dCB3YXJucyBhYm91dCBpdCAoZGVmYXVsdCkKICAgICMgU2V0IGZpbHRlcmVkX2FsaWFzX21vZGUgdG8gJ25vd2FybicgdG8gYWxsb3cgbW9yZSB0aGFuIDIgZmlsdGVyZWQgYWxpYXNlcyBwZXIgaW5kZXggc2lsZW50bHkKICAgICNmaWx0ZXJlZF9hbGlhc19tb2RlOiB3YXJuCiAgICAjZG9fbm90X2ZhaWxfb25fZm9yYmlkZGVuOiBmYWxzZQogICAga2liYW5hOgogICAgIyBLaWJhbmEgbXVsdGl0ZW5hbmN5CiAgICAgIG11bHRpdGVuYW5jeV9lbmFibGVkOiB0cnVlCiAgICAgIHNlcnZlcl91c2VybmFtZToga2liYW5hCiAgICAgICNzZXJ2ZXJfdXNlcm5hbWU6IGFkbWluICAKICAgICNpbmRleDogJy5raWJhbmEnCiAgICBodHRwOgogICAgICBhbm9ueW1vdXNfYXV0aF9lbmFibGVkOiBmYWxzZQogICAgICB4ZmY6CiAgICAgICAgZW5hYmxlZDogZmFsc2UKICAgICAgICBpbnRlcm5hbFByb3hpZXM6ICcxOTJcLjE2OFwuMFwuMTB8MTkyXC4xNjhcLjBcLjExJyAjIHJlZ2V4IHBhdHRlcm4KICAgICAgICAjaW50ZXJuYWxQcm94aWVzOiAnLionICMgdHJ1c3QgYWxsIGludGVybmFsIHByb3hpZXMsIHJlZ2V4IHBhdHRlcm4KICAgICAgICAjcmVtb3RlSXBIZWFkZXI6ICAneC1mb3J3YXJkZWQtZm9yJwogICAgICAgICMjIyMjIyBzZWUgaHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlLzcvZG9jcy9hcGkvamF2YS91dGlsL3JlZ2V4L1BhdHRlcm4uaHRtbCBmb3IgcmVnZXggaGVscAogICAgICAgICMjIyMjIyBtb3JlIGluZm9ybWF0aW9uIGFib3V0IFhGRiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9YLUZvcndhcmRlZC1Gb3IKICAgICAgICAjIyMjIyMgYW5kIGhlcmUgaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzcyMzkKICAgICAgICAjIyMjIyMgYW5kIGh0dHBzOi8vdG9tY2F0LmFwYWNoZS5vcmcvdG9tY2F0LTguMC1kb2MvY29uZmlnL3ZhbHZlLmh0bWwjUmVtb3RlX0lQX1ZhbHZlCiAgICBhdXRoYzoKICAgICAga2VyYmVyb3NfYXV0aF9kb21haW46CiAgICAgICAgaHR0cF9lbmFibGVkOiBmYWxzZQogICAgICAgIHRyYW5zcG9ydF9lbmFibGVkOiBmYWxzZQogICAgICAgIG9yZGVyOiA2CiAgICAgICAgaHR0cF9hdXRoZW50aWNhdG9yOgogICAgICAgICAgdHlwZToga2VyYmVyb3MKICAgICAgICAgIGNoYWxsZW5nZTogdHJ1ZQogICAgICAgICAgY29uZmlnOgogICAgICAgICAgICAjIElmIHRydWUgYSBsb3Qgb2Yga2VyYmVyb3Mvc2VjdXJpdHkgcmVsYXRlZCBkZWJ1Z2dpbmcgb3V0cHV0IHdpbGwgYmUgbG9nZ2VkIHRvIHN0YW5kYXJkIG91dAogICAgICAgICAgICBrcmJfZGVidWc6IGZhbHNlCiAgICAgICAgICAgICMgSWYgdHJ1ZSB0aGVuIHRoZSByZWFsbSB3aWxsIGJlIHN0cmlwcGVkIGZyb20gdGhlIHVzZXIgbmFtZQogICAgICAgICAgICBzdHJpcF9yZWFsbV9mcm9tX3ByaW5jaXBhbDogdHJ1ZQogICAgICAgIGF1dGhlbnRpY2F0aW9uX2JhY2tlbmQ6CiAgICAgICAgICB0eXBlOiBub29wCiAgICAgIGJhc2ljX2ludGVybmFsX2F1dGhfZG9tYWluOgogICAgICAgIGRlc2NyaXB0aW9uOiAiQXV0aGVudGljYXRlIHZpYSBIVFRQIEJhc2ljIGFnYWluc3QgaW50ZXJuYWwgdXNlcnMgZGF0YWJhc2UiCiAgICAgICAgaHR0cF9lbmFibGVkOiB0cnVlCiAgICAgICAgdHJhbnNwb3J0X2VuYWJsZWQ6IHRydWUKICAgICAgICBvcmRlcjogNAogICAgICAgIGh0dHBfYXV0aGVudGljYXRvcjoKICAgICAgICAgIHR5cGU6IGJhc2ljCiAgICAgICAgICBjaGFsbGVuZ2U6IHRydWUKICAgICAgICBhdXRoZW50aWNhdGlvbl9iYWNrZW5kOgogICAgICAgICAgdHlwZTogaW50ZXJuCiAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICBwcm94eV9hdXRoX2RvbWFpbjoKICAgICAgICBkZXNjcmlwdGlvbjogIkF1dGhlbnRpY2F0ZSB2aWEgcHJveHkiCiAgICAgICAgaHR0cF9lbmFibGVkOiBmYWxzZQogICAgICAgIHRyYW5zcG9ydF9lbmFibGVkOiBmYWxzZQogICAgICAgIG9yZGVyOiAzCiAgICAgICAgaHR0cF9hdXRoZW50aWNhdG9yOgogICAgICAgICAgdHlwZTogcHJveHkKICAgICAgICAgIGNoYWxsZW5nZTogZmFsc2UKICAgICAgICAgIGNvbmZpZzoKICAgICAgICAgICAgdXNlcl9oZWFkZXI6ICJ4LXByb3h5LXVzZXIiCiAgICAgICAgICAgIHJvbGVzX2hlYWRlcjogIngtcHJveHktcm9sZXMiCiAgICAgICAgYXV0aGVudGljYXRpb25fYmFja2VuZDoKICAgICAgICAgIHR5cGU6IG5vb3AKICAgICAgand0X2F1dGhfZG9tYWluOgogICAgICAgIGRlc2NyaXB0aW9uOiAiQXV0aGVudGljYXRlIHZpYSBKc29uIFdlYiBUb2tlbiIKICAgICAgICBodHRwX2VuYWJsZWQ6IGZhbHNlCiAgICAgICAgdHJhbnNwb3J0X2VuYWJsZWQ6IGZhbHNlCiAgICAgICAgb3JkZXI6IDIKICAgICAgICBodHRwX2F1dGhlbnRpY2F0b3I6CiAgICAgICAgICB0eXBlOiBqd3QKICAgICAgICAgIGNoYWxsZW5nZTogZmFsc2UKICAgICAgICAgIGNvbmZpZzoKICAgICAgICAgICAgc2lnbmluZ19rZXk6ICJiYXNlNjQgZW5jb2RlZCBITUFDIGtleSBvciBwdWJsaWMgUlNBL0VDRFNBIHBlbSBrZXkiCiAgICAgICAgICAgIGp3dF9oZWFkZXI6ICJBdXRob3JpemF0aW9uIgogICAgICAgICAgICBqd3RfdXJsX3BhcmFtZXRlcjogbnVsbAogICAgICAgICAgICByb2xlc19rZXk6IG51bGwKICAgICAgICAgICAgc3ViamVjdF9rZXk6IG51bGwKICAgICAgICBhdXRoZW50aWNhdGlvbl9iYWNrZW5kOgogICAgICAgICAgdHlwZTogbm9vcAogICAgICBjbGllbnRjZXJ0X2F1dGhfZG9tYWluOgogICAgICAgIGRlc2NyaXB0aW9uOiAiQXV0aGVudGljYXRlIHZpYSBTU0wgY2xpZW50IGNlcnRpZmljYXRlcyIKICAgICAgICBodHRwX2VuYWJsZWQ6IGZhbHNlCiAgICAgICAgdHJhbnNwb3J0X2VuYWJsZWQ6IGZhbHNlCiAgICAgICAgb3JkZXI6IDEKICAgICAgICBodHRwX2F1dGhlbnRpY2F0b3I6CiAgICAgICAgICB0eXBlOiBjbGllbnRjZXJ0CiAgICAgICAgICBjb25maWc6CiAgICAgICAgICAgIHVzZXJuYW1lX2F0dHJpYnV0ZTogY24gI29wdGlvbmFsLCBpZiBvbWl0dGVkIEROIGJlY29tZXMgdXNlcm5hbWUKICAgICAgICAgIGNoYWxsZW5nZTogZmFsc2UKICAgICAgICBhdXRoZW50aWNhdGlvbl9iYWNrZW5kOgogICAgICAgICAgdHlwZTogbm9vcAogICAgICBsZGFwOgogICAgICAgIGRlc2NyaXB0aW9uOiAiQXV0aGVudGljYXRlIHZpYSBMREFQIG9yIEFjdGl2ZSBEaXJlY3RvcnkiCiAgICAgICAgaHR0cF9lbmFibGVkOiBmYWxzZQogICAgICAgIHRyYW5zcG9ydF9lbmFibGVkOiBmYWxzZQogICAgICAgIG9yZGVyOiA1CiAgICAgICAgaHR0cF9hdXRoZW50aWNhdG9yOgogICAgICAgICAgdHlwZTogYmFzaWMKICAgICAgICAgIGNoYWxsZW5nZTogZmFsc2UKICAgICAgICBhdXRoZW50aWNhdGlvbl9iYWNrZW5kOgogICAgICAgICAgIyBMREFQIGF1dGhlbnRpY2F0aW9uIGJhY2tlbmQgKGF1dGhlbnRpY2F0ZSB1c2VycyBhZ2FpbnN0IGEgTERBUCBvciBBY3RpdmUgRGlyZWN0b3J5KQogICAgICAgICAgdHlwZTogbGRhcAogICAgICAgICAgY29uZmlnOgogICAgICAgICAgICAjIGVuYWJsZSBsZGFwcwogICAgICAgICAgICBlbmFibGVfc3NsOiBmYWxzZQogICAgICAgICAgICAjIGVuYWJsZSBzdGFydCB0bHMsIGVuYWJsZV9zc2wgc2hvdWxkIGJlIGZhbHNlCiAgICAgICAgICAgIGVuYWJsZV9zdGFydF90bHM6IGZhbHNlCiAgICAgICAgICAgICMgc2VuZCBjbGllbnQgY2VydGlmaWNhdGUKICAgICAgICAgICAgZW5hYmxlX3NzbF9jbGllbnRfYXV0aDogZmFsc2UKICAgICAgICAgICAgIyB2ZXJpZnkgbGRhcCBob3N0bmFtZQogICAgICAgICAgICB2ZXJpZnlfaG9zdG5hbWVzOiB0cnVlCiAgICAgICAgICAgIGhvc3RzOgogICAgICAgICAgICAtIGxvY2FsaG9zdDo4Mzg5CiAgICAgICAgICAgIGJpbmRfZG46IG51bGwKICAgICAgICAgICAgcGFzc3dvcmQ6IG51bGwKICAgICAgICAgICAgdXNlcmJhc2U6ICdvdT1wZW9wbGUsZGM9ZXhhbXBsZSxkYz1jb20nCiAgICAgICAgICAgICMgRmlsdGVyIHRvIHNlYXJjaCBmb3IgdXNlcnMgKGN1cnJlbnRseSBpbiB0aGUgd2hvbGUgc3VidHJlZSBiZW5lYXRoIHVzZXJiYXNlKQogICAgICAgICAgICAjIHswfSBpcyBzdWJzdGl0dXRlZCB3aXRoIHRoZSB1c2VybmFtZQogICAgICAgICAgICB1c2Vyc2VhcmNoOiAnKHNBTUFjY291bnROYW1lPXswfSknCiAgICAgICAgICAgICMgVXNlIHRoaXMgYXR0cmlidXRlIGZyb20gdGhlIHVzZXIgYXMgdXNlcm5hbWUgKGlmIG5vdCBzZXQgdGhlbiBETiBpcyB1c2VkKQogICAgICAgICAgICB1c2VybmFtZV9hdHRyaWJ1dGU6IG51bGwKICAgIGF1dGh6OgogICAgICByb2xlc19mcm9tX215bGRhcDoKICAgICAgICBkZXNjcmlwdGlvbjogIkF1dGhvcml6ZSB2aWEgTERBUCBvciBBY3RpdmUgRGlyZWN0b3J5IgogICAgICAgIGh0dHBfZW5hYmxlZDogZmFsc2UKICAgICAgICB0cmFuc3BvcnRfZW5hYmxlZDogZmFsc2UKICAgICAgICBhdXRob3JpemF0aW9uX2JhY2tlbmQ6CiAgICAgICAgICAjIExEQVAgYXV0aG9yaXphdGlvbiBiYWNrZW5kIChnYXRoZXIgcm9sZXMgZnJvbSBhIExEQVAgb3IgQWN0aXZlIERpcmVjdG9yeSwgeW91IGhhdmUgdG8gY29uZmlndXJlIHRoZSBhYm92ZSBMREFQIGF1dGhlbnRpY2F0aW9uIGJhY2tlbmQgc2V0dGluZ3MgdG9vKQogICAgICAgICAgdHlwZTogbGRhcAogICAgICAgICAgY29uZmlnOgogICAgICAgICAgICAjIGVuYWJsZSBsZGFwcwogICAgICAgICAgICBlbmFibGVfc3NsOiBmYWxzZQogICAgICAgICAgICAjIGVuYWJsZSBzdGFydCB0bHMsIGVuYWJsZV9zc2wgc2hvdWxkIGJlIGZhbHNlCiAgICAgICAgICAgIGVuYWJsZV9zdGFydF90bHM6IGZhbHNlCiAgICAgICAgICAgICMgc2VuZCBjbGllbnQgY2VydGlmaWNhdGUKICAgICAgICAgICAgZW5hYmxlX3NzbF9jbGllbnRfYXV0aDogZmFsc2UKICAgICAgICAgICAgIyB2ZXJpZnkgbGRhcCBob3N0bmFtZQogICAgICAgICAgICB2ZXJpZnlfaG9zdG5hbWVzOiB0cnVlCiAgICAgICAgICAgIGhvc3RzOgogICAgICAgICAgICAtIGxvY2FsaG9zdDo4Mzg5CiAgICAgICAgICAgIGJpbmRfZG46IG51bGwKICAgICAgICAgICAgcGFzc3dvcmQ6IG51bGwKICAgICAgICAgICAgcm9sZWJhc2U6ICdvdT1ncm91cHMsZGM9ZXhhbXBsZSxkYz1jb20nCiAgICAgICAgICAgICMgRmlsdGVyIHRvIHNlYXJjaCBmb3Igcm9sZXMgKGN1cnJlbnRseSBpbiB0aGUgd2hvbGUgc3VidHJlZSBiZW5lYXRoIHJvbGViYXNlKQogICAgICAgICAgICAjIHswfSBpcyBzdWJzdGl0dXRlZCB3aXRoIHRoZSBETiBvZiB0aGUgdXNlcgogICAgICAgICAgICAjIHsxfSBpcyBzdWJzdGl0dXRlZCB3aXRoIHRoZSB1c2VybmFtZQogICAgICAgICAgICAjIHsyfSBpcyBzdWJzdGl0dXRlZCB3aXRoIGFuIGF0dHJpYnV0ZSB2YWx1ZSBmcm9tIHVzZXIncyBkaXJlY3RvcnkgZW50cnksIG9mIHRoZSBhdXRoZW50aWNhdGVkIHVzZXIuIFVzZSB1c2Vycm9sZWF0dHJpYnV0ZSB0byBzcGVjaWZ5IHRoZSBuYW1lIG9mIHRoZSBhdHRyaWJ1dGUKICAgICAgICAgICAgcm9sZXNlYXJjaDogJyhtZW1iZXI9ezB9KScKICAgICAgICAgICAgIyBTcGVjaWZ5IHRoZSBuYW1lIG9mIHRoZSBhdHRyaWJ1dGUgd2hpY2ggdmFsdWUgc2hvdWxkIGJlIHN1YnN0aXR1dGVkIHdpdGggezJ9IGFib3ZlCiAgICAgICAgICAgIHVzZXJyb2xlYXR0cmlidXRlOiBudWxsCiAgICAgICAgICAgICMgUm9sZXMgYXMgYW4gYXR0cmlidXRlIG9mIHRoZSB1c2VyIGVudHJ5CiAgICAgICAgICAgIHVzZXJyb2xlbmFtZTogZGlzYWJsZWQKICAgICAgICAgICAgI3VzZXJyb2xlbmFtZTogbWVtYmVyT2YKICAgICAgICAgICAgIyBUaGUgYXR0cmlidXRlIGluIGEgcm9sZSBlbnRyeSBjb250YWluaW5nIHRoZSBuYW1lIG9mIHRoYXQgcm9sZSwgRGVmYXVsdCBpcyAibmFtZSIuCiAgICAgICAgICAgICMgQ2FuIGFsc28gYmUgImRuIiB0byB1c2UgdGhlIGZ1bGwgRE4gYXMgcm9sZW5hbWUuCiAgICAgICAgICAgIHJvbGVuYW1lOiBjbgogICAgICAgICAgICAjIFJlc29sdmUgbmVzdGVkIHJvbGVzIHRyYW5zaXRpdmUgKHJvbGVzIHdoaWNoIGFyZSBtZW1iZXJzIG9mIG90aGVyIHJvbGVzIGFuZCBzbyBvbiAuLi4pCiAgICAgICAgICAgIHJlc29sdmVfbmVzdGVkX3JvbGVzOiB0cnVlCiAgICAgICAgICAgIHVzZXJiYXNlOiAnb3U9cGVvcGxlLGRjPWV4YW1wbGUsZGM9Y29tJwogICAgICAgICAgICAjIEZpbHRlciB0byBzZWFyY2ggZm9yIHVzZXJzIChjdXJyZW50bHkgaW4gdGhlIHdob2xlIHN1YnRyZWUgYmVuZWF0aCB1c2VyYmFzZSkKICAgICAgICAgICAgIyB7MH0gaXMgc3Vic3RpdHV0ZWQgd2l0aCB0aGUgdXNlcm5hbWUKICAgICAgICAgICAgdXNlcnNlYXJjaDogJyh1aWQ9ezB9KScKICAgICAgICAgICAgIyBTa2lwIHVzZXJzIG1hdGNoaW5nIGEgdXNlciBuYW1lLCBhIHdpbGRjYXJkIG9yIGEgcmVnZXggcGF0dGVybgogICAgICAgICAgICAjc2tpcF91c2VyczoKICAgICAgICAgICAgIyAgLSAnY249TWljaGFlbCBKYWNrc29uLG91KnBlb3BsZSxvPVRFU1QnCiAgICAgICAgICAgICMgIC0gJy9cUyovJwogICAgICByb2xlc19mcm9tX2Fub3RoZXJfbGRhcDoKICAgICAgICBkZXNjcmlwdGlvbjogIkF1dGhvcml6ZSB2aWEgYW5vdGhlciBBY3RpdmUgRGlyZWN0b3J5IgogICAgICAgIGh0dHBfZW5hYmxlZDogZmFsc2UKICAgICAgICB0cmFuc3BvcnRfZW5hYmxlZDogZmFsc2UKICAgICAgICBhdXRob3JpemF0aW9uX2JhY2tlbmQ6CiAgICAgICAgICB0eXBlOiBsZGFwCiAgICAgICAgICAjY29uZmlnIGdvZXMgaGVyZSAuLi4KICAjICAgIGF1dGhfZmFpbHVyZV9saXN0ZW5lcnM6CiAgIyAgICAgIGlwX3JhdGVfbGltaXRpbmc6CiAgIyAgICAgICAgdHlwZTogaXAKICAjICAgICAgICBhbGxvd2VkX3RyaWVzOiAxMAogICMgICAgICAgIHRpbWVfd2luZG93X3NlY29uZHM6IDM2MDAKICAjICAgICAgICBibG9ja19leHBpcnlfc2Vjb25kczogNjAwCiAgIyAgICAgICAgbWF4X2Jsb2NrZWRfY2xpZW50czogMTAwMDAwCiAgIyAgICAgICAgbWF4X3RyYWNrZWRfY2xpZW50czogMTAwMDAwCiAgIyAgICAgIGludGVybmFsX2F1dGhlbnRpY2F0aW9uX2JhY2tlbmRfbGltaXRpbmc6CiAgIyAgICAgICAgdHlwZTogdXNlcm5hbWUKICAjICAgICAgICBhdXRoZW50aWNhdGlvbl9iYWNrZW5kOiBpbnRlcm4KICAjICAgICAgICBhbGxvd2VkX3RyaWVzOiAxMAogICMgICAgICAgIHRpbWVfd2luZG93X3NlY29uZHM6IDM2MDAKICAjICAgICAgICBibG9ja19leHBpcnlfc2Vjb25kczogNjAwCiAgIyAgICAgICAgbWF4X2Jsb2NrZWRfY2xpZW50czogMTAwMDAwCiAgIyAgICAgICAgbWF4X3RyYWNrZWRfY2xpZW50czogMTAwMDAwCgo=
  
  elasticsearch.yml.example: |-
    
  
  internal_users.yml: |-
    LS0tCiMgVGhpcyBpcyB0aGUgaW50ZXJuYWwgdXNlciBkYXRhYmFzZQojIFRoZSBoYXNoIHZhbHVlIGlzIGEgYmNyeXB0IGhhc2ggYW5kIGNhbiBiZSBnZW5lcmF0ZWQgd2l0aCBwbHVnaW4vdG9vbHMvaGFzaC5zaAoKX21ldGE6CiAgdHlwZTogImludGVybmFsdXNlcnMiCiAgY29uZmlnX3ZlcnNpb246IDIKCiMgRGVmaW5lIHlvdXIgaW50ZXJuYWwgdXNlcnMgaGVyZQoKIyMgRGVtbyB1c2VycwojIyAkJC4uLiBhcmUgcGxhY2Vob2xkZXJzIGZvciB0aGUgZ2VuZXJhdGVkIHVzZXJuYW1lIGFuZCBwYXNzd29yZHMgZHVyaW5nIGhlbG0gY2hhcnQgaW5zdGFsbGF0aW9uCgplc2FkbWluOgogIGhhc2g6ICIkJEVMQVNUSUNTRUFSQ0hfUEFTU1dPUkRfSEFTSCIKICByZXNlcnZlZDogdHJ1ZQogIGJhY2tlbmRfcm9sZXM6CiAgLSAiYWRtaW4iCiAgZGVzY3JpcHRpb246ICJEZW1vIGFkbWluIHVzZXIiCgpraWJhbmE6CiAgaGFzaDogIiQkS0lCQU5BX1BBU1NXT1JEX0hBU0giCiAgcmVzZXJ2ZWQ6IHRydWUKICBiYWNrZW5kX3JvbGVzOgogIC0gImtpYmFuYV9hZG1pbiIKICBkZXNjcmlwdGlvbjogIkRlbW8ga2liYW5hc2VydmVyIHVzZXIiCgoja2liYW5hcm86CiMgIGhhc2g6ICIkMmEkMTIkSkpTWE5mVG93ejdVdTV0dFhmZVlwZVlFMGFyQUN2Y3dsUEJTdEIxRi5NSTdmMFU5WjRER0MiCiMgIHJlc2VydmVkOiBmYWxzZQojICBiYWNrZW5kX3JvbGVzOgojICAtICJraWJhbmF1c2VyIgojICAtICJyZWFkYWxsIgojICBhdHRyaWJ1dGVzOgojICAgIGF0dHJpYnV0ZTE6ICJ2YWx1ZTEiCiMgICAgYXR0cmlidXRlMjogInZhbHVlMiIKIyAgICBhdHRyaWJ1dGUzOiAidmFsdWUzIgojICBkZXNjcmlwdGlvbjogIkRlbW8ga2liYW5hcm8gdXNlciIjCgojbG9nc3Rhc2g6CiMgIGhhc2g6ICIkMmEkMTIkdTFTaFI0bDR1QlMzVXY1OVBhMnk1LjF1UXVaQnJadG1OZnFCM2lNLy5qTDBYb1Y5c2doUzIiCiMgIHJlc2VydmVkOiBmYWxzZQojICBiYWNrZW5kX3JvbGVzOgojICAtICJsb2dzdGFzaCIKIyAgZGVzY3JpcHRpb246ICJEZW1vIGxvZ3N0YXNoIHVzZXIiIwoKI3JlYWRhbGw6CiMgIGhhc2g6ICIkMmEkMTIkYWU0eWN3end2THRaeHdaODJSbWlFdW5CYklQaUFtR1pkdUJBaktOMFRYZHdRRnRDd0FSejIiCiMgIHJlc2VydmVkOiBmYWxzZQojICBiYWNrZW5kX3JvbGVzOgojICAtICJyZWFkYWxsIgojICBkZXNjcmlwdGlvbjogIkRlbW8gcmVhZGFsbCB1c2VyIiMKCiNzbmFwc2hvdHJlc3RvcmU6CiMgIGhhc2g6ICIkMnkkMTIkRHB3bWV0SEt3Z1lub3JiZ2R2T1JDZW52NE5BSzhjUFVnOEFJNnB4TEN1V2YvQUxjMC52N1ciCiMgIHJlc2VydmVkOiBmYWxzZQojICBiYWNrZW5kX3JvbGVzOgojICAtICJzbmFwc2hvdHJlc3RvcmUiCiMgIGRlc2NyaXB0aW9uOiAiRGVtbyBzbmFwc2hvdHJlc3RvcmUgdXNlciI=
  
  nodes_dn.yml: |-
    X21ldGE6CiAgdHlwZTogIm5vZGVzZG4iCiAgY29uZmlnX3ZlcnNpb246IDIKCiMgRGVmaW5lIG5vZGVzZG4gbWFwcGluZyBuYW1lIGFuZCBjb3JyZXNwb25kaW5nIHZhbHVlcwpsb2dnaW5nOgogIG5vZGVzX2RuOgogICAgLSBDTj0qLmxvZ2dpbmcuc3ZjLmNsdXN0ZXIubG9jYWwsT1U9bG9nZ2luZyxPPUs4UyxDPURF
  
  roles.yml: |-
    X21ldGE6CiAgdHlwZTogInJvbGVzIgogIGNvbmZpZ192ZXJzaW9uOiAyCgojIFJlc3RyaWN0IHVzZXJzIHNvIHRoZXkgY2FuIG9ubHkgdmlldyB2aXN1YWxpemF0aW9uIGFuZCBkYXNoYm9hcmQgb24ga2liYW5hCmtpYmFuYV9yZWFkX29ubHk6CiAgcmVzZXJ2ZWQ6IHRydWUKCmFkbWluOgogIHJlc2VydmVkOiB0cnVlCiAgY2x1c3Rlcl9wZXJtaXNzaW9uczoKICAtICJ1bmxpbWl0ZWQiCiAgaW5kZXhfcGVybWlzc2lvbnM6CiAgLSBpbmRleF9wYXR0ZXJuczoKICAgIC0gIioiCiAgICBhbGxvd2VkX2FjdGlvbnM6CiAgICAgIC0gdW5saW1pdGVkCgpraWJhbmFfdmlld2VyOgogIHJlc2VydmVkOiB0cnVlCiAgY2x1c3Rlcl9wZXJtaXNzaW9uczoKICAtICJjbHVzdGVyX2NvbXBvc2l0ZV9vcHNfcm8iCiAgaW5kZXhfcGVybWlzc2lvbnM6CiAgLSBpbmRleF9wYXR0ZXJuczogIAogICAgLSAiY29udGFpbmVycyoiCiAgICAtICJqb3VybmFscyoiCiAgICAtICJ4NCoiCiAgICAtICIua2liYW5hKiIKICAgIGFsbG93ZWRfYWN0aW9uczoKICAgIC0gInJlYWQiCiAgICAtICJzZWFyY2giCiAgdGVuYW50X3Blcm1pc3Npb25zOgogIC0gdGVuYW50X3BhdHRlcm5zOgogICAgLSAiZ2xvYmFsKiIKICAgIGFsbG93ZWRfYWN0aW9uczoKICAgIC0gImtpYmFuYV9hbGxfcmVhZCIgIAogIAoKa2liYW5hX2FkbWluOgogIHJlc2VydmVkOiB0cnVlCiAgY2x1c3Rlcl9wZXJtaXNzaW9uczoKICAtICJ1bmxpbWl0ZWQiCiAgaW5kZXhfcGVybWlzc2lvbnM6CiAgLSBpbmRleF9wYXR0ZXJuczoKICAgIC0gIioiCiAgICBhbGxvd2VkX2FjdGlvbnM6CiAgICAgIC0gdW5saW1pdGVkCiAgCgojIFRoZSBzZWN1cml0eSBSRVNUIEFQSSBhY2Nlc3Mgcm9sZSBpcyB1c2VkIHRvIGFzc2lnbiBzcGVjaWZpYyB1c2VycyBhY2Nlc3MgdG8gY2hhbmdlIHRoZSBzZWN1cml0eSBzZXR0aW5ncyB0aHJvdWdoIHRoZSBSRVNUIEFQSS4Kc2VjdXJpdHlfcmVzdF9hcGlfYWNjZXNzOgogIHJlc2VydmVkOiB0cnVlCiAKIyBBbGxvd3MgdXNlcnMgdG8gdmlldyBhbGVydHMKYWxlcnRpbmdfdmlld19hbGVydHM6CiAgcmVzZXJ2ZWQ6IHRydWUKICBpbmRleF9wZXJtaXNzaW9uczoKICAgIC0gaW5kZXhfcGF0dGVybnM6CiAgICAgIC0gIi5vcGVuZGlzdHJvLWFsZXJ0aW5nLWFsZXJ0KiIKICAgICAgYWxsb3dlZF9hY3Rpb25zOgogICAgICAgIC0gcmVhZCAKCiMgQWxsb3dzIHVzZXJzIHRvIHZpZXcgYW5kIGFja25vd2xlZGdlIGFsZXJ0cwphbGVydGluZ19jcnVkX2FsZXJ0czoKICByZXNlcnZlZDogdHJ1ZQogIGluZGV4X3Blcm1pc3Npb25zOgogICAgLSBpbmRleF9wYXR0ZXJuczoKICAgICAgLSAiLm9wZW5kaXN0cm8tYWxlcnRpbmctYWxlcnQqIgogICAgICBhbGxvd2VkX2FjdGlvbnM6CiAgICAgICAtIGNydWQgCgojIEFsbG93cyB1c2VycyB0byB1c2UgYWxsIGFsZXJ0aW5nIGZ1bmN0aW9uYWxpdHkKYWxlcnRpbmdfZnVsbF9hY2Nlc3M6CiAgcmVzZXJ2ZWQ6IHRydWUKICBpbmRleF9wZXJtaXNzaW9uczoKICAgIC0gaW5kZXhfcGF0dGVybnM6CiAgICAgIC0gIi5vcGVuZGlzdHJvLWFsZXJ0aW5nLWNvbmZpZyIKICAgICAgLSAiLm9wZW5kaXN0cm8tYWxlcnRpbmctYWxlcnQqIgogICAgICBhbGxvd2VkX2FjdGlvbnM6CiAgICAgICAgLSBjcnVkIAoKa2liYW5hX2xvZ2dpbmdfdGVuYW50OgogIHJlc2VydmVkOiBmYWxzZQogIGhpZGRlbjogZmFsc2UKICBjbHVzdGVyX3Blcm1pc3Npb25zOgogIC0gImluZGljZXM6ZGF0YS9yZWFkL21nZXQqIgogIGluZGV4X3Blcm1pc3Npb25zOgogIC0gaW5kZXhfcGF0dGVybnM6CiAgICAtICJsb2dnaW5nIgogICAgYWxsb3dlZF9hY3Rpb25zOgogICAgLSAiaW5kaWNlczpkYXRhL3JlYWQvc2VhcmNoIgogICAgLSAiaW5kaWNlczpkYXRhL3JlYWQvbWdldCoiCiAgdGVuYW50X3Blcm1pc3Npb25zOgogIC0gdGVuYW50X3BhdHRlcm5zOgogICAgLSAibG9nZ2luZ190ZW5hbnQiCiAgICBhbGxvd2VkX2FjdGlvbnM6CiAgICAtICJraWJhbmFfYWxsX3JlYWQiCiAgc3RhdGljOiBmYWxzZSAgICAg
  
  roles_mapping.yml: |-
    LS0tCiMgSW4gdGhpcyBmaWxlIHVzZXJzLCBiYWNrZW5kcm9sZXMgYW5kIGhvc3RzIGNhbiBiZSBtYXBwZWQgdG8gT3BlbiBEaXN0cm8gU2VjdXJpdHkgcm9sZXMuCiMgUGVybWlzc2lvbnMgZm9yIE9wZW5kaXN0cm8gcm9sZXMgYXJlIGNvbmZpZ3VyZWQgaW4gcm9sZXMueW1sCgpfbWV0YToKICB0eXBlOiAicm9sZXNtYXBwaW5nIgogIGNvbmZpZ192ZXJzaW9uOiAyCgojIERlZmluZSB5b3VyIHJvbGVzIG1hcHBpbmcgaGVyZQoKIyMgRGVtbyByb2xlcyBtYXBwaW5nCgphbGxfYWNjZXNzOgogIHJlc2VydmVkOiBmYWxzZQogIGJhY2tlbmRfcm9sZXM6CiAgLSAKICBkZXNjcmlwdGlvbjogIk1hcHMgYWRtaW4gdG8gYWxsX2FjY2VzcyIKCmFkbWluOgogIHJlc2VydmVkOiBmYWxzZQogIHVzZXJzOgogIC0gZXNhZG1pbgogIGFuZF9iYWNrZW5kX3JvbGVzOgogIC0gYWRtaW4KICBkZXNjcmlwdGlvbjogIk1hcHMgZXh0ZXJuYWwgZXMgdXNlciB0byBhZG1pbiByb2xlIgoKI293bl9pbmRleDoKIyAgcmVzZXJ2ZWQ6IGZhbHNlCiMgIHVzZXJzOgojICAtICIqIgojICBhbmRfYmFja2VuZF9yb2xlczoKIyAgLSAgIAojICBkZXNjcmlwdGlvbjogIkFsbG93IGZ1bGwgYWNjZXNzIHRvIGFuIGluZGV4IG5hbWVkIGxpa2UgdGhlIHVzZXJuYW1lIgogIAoKbG9nc3Rhc2g6CiAgcmVzZXJ2ZWQ6IGZhbHNlCiAgYmFja2VuZF9yb2xlczoKICAtICJsb2dzdGFzaCIKCnJlYWRhbGw6CiAgcmVzZXJ2ZWQ6IGZhbHNlCiAgYmFja2VuZF9yb2xlczoKICAtICJyZWFkYWxsIgoKbWFuYWdlX3NuYXBzaG90czoKICByZXNlcnZlZDogZmFsc2UKICBiYWNrZW5kX3JvbGVzOgogIC0gInNuYXBzaG90cmVzdG9yZSIKCmtpYmFuYV9zZXJ2ZXI6CiAgcmVzZXJ2ZWQ6IHRydWUKICB1c2VyczoKICAtICJraWJhbmEiCgpraWJhbmFfdmlld2VyOgogIHJlc2VydmVkOiBmYWxzZQogIGJhY2tlbmRfcm9sZXM6CiAgLSAKCmtpYmFuYV91c2VyOgogIHJlc2VydmVkOiBmYWxzZQoKa2liYW5hX2FkbWluOgogIHJlc2VydmVkOiBmYWxzZQogIGJhY2tlbmRfcm9sZXM6CiAgLSAKICAtICJraWJhbmFfYWRtaW4iCgpraWJhbmFfbG9nZ2luZ190ZW5hbnQ6CiAgcmVzZXJ2ZWQ6IGZhbHNlCiAgZGVzY3JpcHRpb246ICJsb2dnaW5nIHRlbmFudCIKICBiYWNrZW5kX3JvbGVzOgogIC0gCg==
  
  tenants.yml: |-
    LS0tCl9tZXRhOgogIHR5cGU6ICJ0ZW5hbnRzIgogIGNvbmZpZ192ZXJzaW9uOiAyCgojIERlZmluZSB5b3VyIHRlbmFudHMgaGVyZQoKIyMgRGVtbyB0ZW5hbnRzCmFkbWluX3RlbmFudDoKICByZXNlcnZlZDogZmFsc2UKICBkZXNjcmlwdGlvbjogIkRlbW8gdGVuYW50IGZvciBhZG1pbiB1c2VyIgoKCgo=
---
# Source: kubernetes-logging/templates/logstash/logstash-indexer-1elasticsearch-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: logstash-indexer-elasticsearch
type: Opaque
data:
  host: aHR0cHM6Ly9lbGstY2xpZW50LmxvZ2dpbmcuc3ZjLmNsdXN0ZXIubG9jYWw6OTIwMA==
  user: ZXNhZG1pbg==
  password: ZXNhZG1pbg==
---
# Source: kubernetes-logging/templates/beats/filebeat-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: elk-filebeat-config
  labels:     
    app: elk-kubernetes-logging
    chart: kubernetes-logging-0.8.0
    release: elk
    heritage: Helm
data:
  filebeat.yml: |-
    logging.level: warning

    filebeat.inputs:
    - type: container
      paths:
        - '/var/lib/docker/containers/*/*-json.log'
      multiline.pattern: '^[[:space:]]'
      multiline.negate: false
      multiline.match: after
      multiline.max_lines: 10000

    tags: ["filebeat"]  
      
    processors:
      - add_id: ~
      - add_kubernetes_metadata:
          in_cluster: true  
    
    filebeat.autodiscover:
      providers:
      - type: kubernetes
        templates:
        - config:
            - type: container
              paths:
                - /var/log/containers/*-${data.kubernetes.container.id}-json.log

    output.kafka:
      enabled: false
      hosts: ["kafka-svc.logging:9092"]
      topic: 'containers'
      partition.hash:
        reachable_only: true
      required_acks: 1
      max_message_bytes: 15728640
      client_id: "${HOSTNAME}"

    output.console:
      enabled: false
      pretty: true

    output.logstash:
      enabled: true
      hosts: ["elk-logstash-indexer:5044"]
---
# Source: kubernetes-logging/templates/beats/journalbeat-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: elk-journalbeat-config
  labels:     
    app: elk-kubernetes-logging
    chart: kubernetes-logging-0.8.0
    release: elk
    heritage: Helm
data:
  journalbeat.yml: |-
    logging.level: warning

    journalbeat.inputs:
    # Paths that should be crawled and fetched. Possible values files and directories.
    # When setting a directory, all journals under it are merged.
    # When empty starts to read from local journal.
    # Position to start reading from journal. Valid values: head, tail, cursor
    - paths: ["/var/run/log/journal"]
      seek: cursor

    tags: ["journalbeat"]
    
    processors:
    - add_id: ~
    - add_kubernetes_metadata:
        in_cluster: true
    #- fingerprint:
    #    fields: ["@timestamp", "@metadata._id"]
    #    ignore_missing: true      

    output.kafka:
      enabled: false
      hosts: ["kafka-svc.logging:9092"]
      topic: 'journals'
      partition.hash:
        reachable_only: true
      required_acks: 1
      max_message_bytes: 15728640
      client_id: "${HOSTNAME}"

    output.console:
      enabled: false
      pretty: true

    output.logstash:
      enabled: true
      hosts: ["elk-logstash-indexer:5045"]
---
# Source: kubernetes-logging/templates/elasticsearch/es-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: elk
  labels:     
    app: elk-kubernetes-logging
    chart: kubernetes-logging-0.8.0
    release: elk
    heritage: Helm
data:
  log4j2.properties: |-
    status = error

    appender.console.type = Console
    appender.console.name = console
    appender.console.layout.type = PatternLayout
    appender.console.layout.pattern = [%d{ISO8601}][%-5p][%-25c{1.}] [%node_name]%marker %m%n

    rootLogger.level = error
    rootLogger.appenderRef.console.ref = console
    
    logger.opendistro_security.name = com.amazon.opendistroforelasticsearch.security
    logger.opendistro_security.level = warning

    logger.saml.name = com.amazon.dlic.auth.http.saml.Token
    logger.saml.level = error

    logger.opendistro_security_jwt.name = com.amazon.dlic.auth.http.jwt
    logger.opendistro_security_jwt.level = error

  elasticsearch.yml: |-
    cluster.name: "logging"
    path.data: /data    

    network.host: 0.0.0.0

    discovery.zen.minimum_master_nodes: 1
    cluster.initial_master_nodes: 
    - elk-master-0

    node.master: ${NODE_MASTER:true}
    node.data: ${NODE_DATA:true}
    node.ingest: ${NODE_INGEST:true}

    node.name: ${HOSTNAME}

    thread_pool.write.queue_size: 1000
    thread_pool.search.queue_size: 1000
    thread_pool.get.queue_size: 1000
    thread_pool.analyze.queue_size: 100

    opendistro_security.allow_unsafe_democertificates: false
    # opendistro_security.allow_default_init_securityindex: true
    # opendistro_security.audit.type: internal_elasticsearch
    # opendistro_security.enable_snapshot_restore_privilege: true
    # opendistro_security.check_snapshot_restore_write_privileges: true
    # cluster.routing.allocation.disk.threshold_enabled: false
    # opendistro_security.audit.config.disabled_rest_categories: NONE
    # opendistro_security.audit.config.disabled_transport_categories: NONE

    # TLS Configuration Transport Layer
    opendistro_security.nodes_dn:
      - 'CN=*.logging.svc.cluster.local,OU=logging,O=K8S,C=DE'
    opendistro_security.authcz.admin_dn:
      - 'CN=admin,OU=logging,O=K8S,C=DE'  
    opendistro_security.ssl.transport.pemcert_filepath: node.pem
    opendistro_security.ssl.transport.pemkey_filepath: node-key.pem
    opendistro_security.ssl.transport.pemtrustedcas_filepath: root-ca.pem
    opendistro_security.ssl.transport.enforce_hostname_verification: false
    opendistro_security.ssl.transport.truststore_filepath: elasticsearch.truststore
    opendistro_security.ssl.transport.truststore_password: 92cdf688aac64d17b230
    
  
    # TLS Configuration REST Layer
    opendistro_security.ssl.http.enabled: true
    opendistro_security.ssl.http.pemcert_filepath: elk-rest.pem
    opendistro_security.ssl.http.pemkey_filepath: elk-rest-key.pem
    opendistro_security.ssl.http.pemtrustedcas_filepath: root-ca.pem
    opendistro_security.restapi.roles_enabled: ["all_access", "admin"]
---
# Source: kubernetes-logging/templates/elasticsearch/es-curator-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: elk-curator
  labels:     
    app: elk-kubernetes-logging
    chart: kubernetes-logging-0.8.0
    release: elk
    heritage: Helm
data:
  actions.yml: |+
    actions:
      1:
        action: delete_indices
        description: >-
          Delete indices older than 2 days (based on index creation_date).
          Ignore the error if the filter does not result in an
          actionable list of indices (ignore_empty_list) and exit cleanly.
        options:
          ignore_empty_list: True
          timeout_override:
          continue_if_exception: False
          disable_action: False
        filters:
        - filtertype: age
          source: creation_date
          direction: older
          timestring: '%Y.%m.%d'
          unit: days
          unit_count: 2
          exclude:
        - filtertype: kibana
          exclude: True
        - filtertype: pattern
          kind: prefix
          value: .opendistro
          exclude: True
        - filtertype: pattern
          kind: prefix
          value: .tasks
          exclude: True  
      2:
        action: alias
        description: >-
          Alias newly created indices under containers alias
        options:
          ignore_empty_list: True
          name: containers
          warn_if_no_indices: False
          disable_action: False
        add:
          filters:
          - filtertype: pattern
            kind: prefix
            value: containers-
            exclude:
        
      3:
        action: alias
        description: >-
          Alias newly created indices under journals alias
        options:
          ignore_empty_list: True
          name: journals
          warn_if_no_indices: False
          disable_action: False
        add:
          filters:
          - filtertype: pattern
            kind: prefix
            value: journals-
            exclude:
        
      4:
        action: alias
        description: >-
          Alias newly created indices under logging alias
        options:
          ignore_empty_list: True
          name: logging
          warn_if_no_indices: False
          disable_action: False
          extra_settings:
            filter:
              term:
                kubernetes.namespace.keyword: logging
        add:
          filters:
          - filtertype: pattern
            kind: prefix
            value: containers-
            exclude:
          - filtertype: period
            period_type: relative
            source: name
            range_from: 0
            range_to: 0
            timestring: '%Y.%m.%d'
            unit: days
      5:
        action: alias
        description: >-
          Alias newly created indices under monitoring alias
        options:
          ignore_empty_list: True
          name: monitoring
          warn_if_no_indices: False
          disable_action: False
          extra_settings:
            filter:
              term:
                kubernetes.namespace.keyword: monitoring
        add:
          filters:
          - filtertype: pattern
            kind: prefix
            value: containers-
            exclude:
          - filtertype: period
            period_type: relative
            source: name
            range_from: 0
            range_to: 0
            timestring: '%Y.%m.%d'
            unit: days      
            
  curator.yml: |+
    ---
    # Remember, leave a key empty if there is no value.  None will be a string,
    # not a Python "NoneType"
    client:
      hosts:
        - ${ES_HOST}
      url_prefix:
      use_ssl: true
      certificate: /etc/root-ca.pem
      client_cert:
      client_key:
      ssl_no_validate: false
      username: esadmin
      password: esadmin
      timeout: 300
      master_only: false
      
    logging:
      loglevel: INFO
      logformat: default
---
# Source: kubernetes-logging/templates/elasticsearch/es-securityadmin-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: elk-securityadmin
  labels:     
    app: elk-kubernetes-logging
    chart: kubernetes-logging-0.8.0
    release: elk
    heritage: Helm
data:
  setup.sh: |-
    #!/bin/bash

    set -e     

    echo "setingup users"
    echo "node $es_node"
    
    chmod +x /usr/share/elasticsearch/plugins/opendistro_security/tools/hash.sh

    es_pass_hash=`/usr/share/elasticsearch/plugins/opendistro_security/tools/hash.sh -env es_pass`
    ki_pass_hash=`/usr/share/elasticsearch/plugins/opendistro_security/tools/hash.sh -env ki_pass`

    cp /usr/share/elasticsearch/plugins/opendistro_security/securityconfig/internal_users.yml /tmp/internal_users.yml
    chmod +w /tmp/internal_users.yml

    sed -i -e "s|\$\$ELASTICSEARCH_PASSWORD_HASH|$es_pass_hash|" /tmp/internal_users.yml
    sed -i -e "s|\$\$KIBANA_PASSWORD_HASH|$ki_pass_hash|" /tmp/internal_users.yml


    echo "##### internal_users.yml #####"
    
    echo "##### setting up security configuration #####"
    chmod +x /usr/share/elasticsearch/plugins/opendistro_security/tools/securityadmin.sh
      /usr/share/elasticsearch/plugins/opendistro_security/tools/securityadmin.sh \
      -cacert /usr/share/elasticsearch/config/root-ca.pem \
      -cert /usr/share/elasticsearch/config/admin.pem \
      -key /usr/share/elasticsearch/config/admin-key.pem \
      -cd /usr/share/elasticsearch/plugins/opendistro_security/securityconfig/ \
      -h $es_node -sniff -nhnv -icl 

    echo "##### setting up users configuration #####"
    chmod +x /usr/share/elasticsearch/plugins/opendistro_security/tools/securityadmin.sh
      /usr/share/elasticsearch/plugins/opendistro_security/tools/securityadmin.sh \
      -cacert /usr/share/elasticsearch/config/root-ca.pem \
      -cert /usr/share/elasticsearch/config/admin.pem \
      -key /usr/share/elasticsearch/config/admin-key.pem \
      -f /tmp/internal_users.yml \
      -h $es_node -sniff -nhnv -icl
---
# Source: kubernetes-logging/templates/init-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: elk-init
  labels:     
    app: elk-kubernetes-logging
    chart: kubernetes-logging-0.8.0
    release: elk
    heritage: Helm
data:
  init.sh: |-
    #!/bin/bash

    set -e    

    if [[ $1 == http* ]]; then
      # extract the protocol
      proto="$(echo $1 | grep :// | sed -e's,^\(.*://\).*,\1,g')"
      # remove the protocol
      url="$(echo ${1/$proto/})"
      # extract the user (if any)
      user="$(echo $url | grep @ | cut -d@ -f1)"
      # extract the host and port
      hostport="$(echo ${url/$user@/} | cut -d/ -f1)"
      # by request host without port    
      host="$(echo $hostport | sed -e 's,:.*,,g')"
      # by request - try to extract the port
      port=`echo $hostport | grep : | cut -d: -f2`
      if [[ -z $port ]]; then
        if [[ $proto = http:// ]]; then
          port=80
        fi
        if [[ $proto == https:// ]]; then 
          port=443 
        fi
     fi 
     else
       host=$1
       port=$2
     fi  
     
     echo "check for host: $host at port: $port"
     
     while ! nc -z -w 2 $host $port; do 
       echo "connecting $host:$port"
       sleep 2
     done
---
# Source: kubernetes-logging/templates/kibana/indices-templates-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: elk-indices-templates
data:  
  containers_template.json: |-
    {
      "settings": {
        "index" : {
        	"number_of_shards" : "1",
          "number_of_replicas" : "0"
        }
      },
      "mappings" : {
        "_source" : {
          "enabled" : true
        },
        "properties" : {
          "@timestamp" : {
              "type" : "date"
          },
          "id" : {
              "type" : "keyword"
          },
          "fingerprint" : {
              "type" : "keyword"
          }
        }        
      },  
      "index_patterns":["containers-*"]
    }
  
  journals_template.json: |-
    {
      "settings": {
        "index" : {
        	"number_of_shards" : "1",
          "number_of_replicas" : "0"
        }
      },
      "mappings" : {
        "_source" : {
          "enabled" : true
        },
        "properties" : {
          "@timestamp" : {
              "type" : "date"
          },
          "id" : {
              "type" : "keyword"
          },
          "fingerprint" : {
              "type" : "keyword"
          }
        }
      },
      "index_patterns":["journals-*"]
    }
---
# Source: kubernetes-logging/templates/kibana/kibana-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: elk-kibana
  labels:     
    app: elk-kubernetes-logging
    chart: kubernetes-logging-0.8.0
    release: elk
    heritage: Helm
data:
  kibana.yml: |-
    server.name: kibana
    server.host: "0"

    logging.quiet: true
    logging.verbose: false
    logging.json: false

    elasticsearch.logQueries: false
    elasticsearch.hosts: https://elk-client.logging.svc.cluster.local:9200
    elasticsearch.ssl.verificationMode: none
    elasticsearch.username: kibana
    elasticsearch.password: kibana
    elasticsearch.requestHeadersWhitelist: ["securitytenant","Authorization"]

    # Optional settings that provide the paths to the PEM-format SSL certificate and key files.
    # These files are used to verify the identity of Kibana to Elasticsearch and are required when
    # xpack.security.http.ssl.client_authentication in Elasticsearch is set to required.
    #elasticsearch.ssl.certificate: /opt/kibana/config/admin.pem
    #elasticsearch.ssl.key: /opt/kibana/config/admin-key.pem

    # Optional setting that enables you to specify a path to the PEM file for the certificate
    # authority for your Elasticsearch instance.
    elasticsearch.ssl.certificateAuthorities:
    - /opt/kibana/config/root-ca.pem

    newsfeed.enabled: false
    telemetry.optIn: false
    telemetry.enabled: false

    opendistro_security.readonly_mode.roles: ["kibana_read_only"]

    

    opendistro_security.multitenancy.enabled: true
    opendistro_security.multitenancy.tenants.enable_private: false
    #opendistro_security.multitenancy.tenants.preferred: ["x4tenant","Global"]
    opendistro_security.cookie.secure: false

  create_index_pattern.sh: |-
    #!/bin/bash
     
    set -x 
    kibana_host=$1
    IFS=',' read -r -a index_list <<< "$2"
    kibana_auth=""

    if [ -n "$3" ]; then
      kibana_auth="--user $3:$4"
    fi

    echo $kibana_auth

    for i in ${index_list[@]}; do
    if [ `curl -sS -X GET ${kibana_auth} ${kibana_host}/api/saved_objects/index-pattern/${i} | grep '"statusCode":404' |wc -l` -gt 0 ]; then
      echo "creating index pattern: ${i}"
      curl -sS -X POST ${kibana_auth} "${kibana_host}/api/saved_objects/index-pattern/${i}" -H 'kbn-xsrf: true' -H 'Content-Type: application/json' -d "{\"attributes\": {\"title\": \"${i}-*\",\"timeFieldName\": \"@timestamp\"}}"
        echo ""
    else
      echo "creating index pattern: ${i} already exist"
    fi
    done

    kibana_version=$(kibana --version)

    if [ `curl -sS -X GET ${kibana_auth} "${kibana_host}/api/saved_objects/config/${kibana_version}" | grep defaultIndex |wc -l` -lt 1 ]; then
        echo "Setting default index to ${index_list[0]}"
        curl -sS -X PUT ${kibana_auth} "${kibana_host}/api/saved_objects/config/${kibana_version}" -H 'kbn-xsrf: true' -H 'Content-Type: application/json' -d "{\"attributes\": {\"defaultIndex\": \"${index_list[0]}\"}}"
    fi

    if [ `curl -sS -X GET ${kibana_auth} "${kibana_host}/api/saved_objects/config/${kibana_version}" | grep '"defaultIndex":null' |wc -l` -gt 0 ]; then
        echo "Setting default index to ${index_list[0]}"
        curl -sS -X PUT ${kibana_auth} "${kibana_host}/api/saved_objects/config/${kibana_version}" -H 'kbn-xsrf: true' -H 'Content-Type: application/json' -d "{\"attributes\": {\"defaultIndex\": \"${index_list[0]}\"}}"
    fi

    echo "Import saved objects"
    for f in /tmp/saved_objects/*
    do
      echo "Processing $f file..."
      # take action on each file. $f store current file name
      curl -sS -X POST -k ${kibana_auth} "${kibana_host}/api/saved_objects/_import?overwrite=true" -H "kbn-xsrf: true" --form file=@$f
      echo "done"
    done
---
# Source: kubernetes-logging/templates/kibana/kibana-saved-objects-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: elk-kibana-saved-objects
  labels:     
    app: elk-kubernetes-logging
    chart: kubernetes-logging-0.8.0
    release: elk
    heritage: Helm
data:
  1_containers-search.ndjson: '{"attributes":{"columns":["message"],"description":"","hits":0,"kibanaSavedObjectMeta":{"searchSourceJSON":"{\"highlightAll\":true,\"version\":true,\"query\":{\"language\":\"kuery\",\"query\":\"\"},\"indexRefName\":\"kibanaSavedObjectMeta.searchSourceJSON.index\",\"filter\":[]}"},"sort":[["@timestamp","desc"]],"title":"containers","version":1},"id":"d1dd2370-547c-11ea-ac0b-5b9ac52105c7","references":[{"id":"containers","name":"kibanaSavedObjectMeta.searchSourceJSON.index","type":"index-pattern"}],"type":"search"}'
  1_journals-search.ndjson: '{"attributes":{"columns":["message"],"description":"","hits":0,"kibanaSavedObjectMeta":{"searchSourceJSON":"{\"highlightAll\":true,\"version\":true,\"query\":{\"language\":\"kuery\",\"query\":\"\"},\"indexRefName\":\"kibanaSavedObjectMeta.searchSourceJSON.index\",\"filter\":[]}"},"sort":[["@timestamp","desc"]],"title":"journals","version":1},"id":"50aa6c20-547e-11ea-ac0b-5b9ac52105c7","references":[{"id":"journals","name":"kibanaSavedObjectMeta.searchSourceJSON.index","type":"index-pattern"}],"type":"search"}'
  2_logs-per-namespace-vis.ndjson: '{"attributes":{"description":"","kibanaSavedObjectMeta":{"searchSourceJSON":"{\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"indexRefName\":\"kibanaSavedObjectMeta.searchSourceJSON.index\",\"filter\":[]}"},"title":"Logs
    per Namespace","uiStateJSON":"{\"vis\":{\"params\":{\"sort\":{\"columnIndex\":null,\"direction\":null}}}}","version":1,"visState":"{\"title\":\"Logs
    per Namespace\",\"type\":\"table\",\"params\":{\"perPage\":10,\"showPartialRows\":false,\"showMetricsAtAllLevels\":false,\"sort\":{\"columnIndex\":null,\"direction\":null},\"showTotal\":false,\"totalFunc\":\"sum\",\"percentageCol\":\"\",\"dimensions\":{\"metrics\":[{\"accessor\":0,\"format\":{\"id\":\"number\"},\"params\":{},\"aggType\":\"count\"}],\"buckets\":[]}},\"aggs\":[{\"id\":\"1\",\"enabled\":true,\"type\":\"count\",\"schema\":\"metric\",\"params\":{}},{\"id\":\"2\",\"enabled\":true,\"type\":\"terms\",\"schema\":\"bucket\",\"params\":{\"field\":\"kubernetes.namespace.keyword\",\"orderBy\":\"1\",\"order\":\"desc\",\"size\":5,\"otherBucket\":false,\"otherBucketLabel\":\"Other\",\"missingBucket\":false,\"missingBucketLabel\":\"Missing\"}}]}"},"id":"9136cde0-547b-11ea-ac0b-5b9ac52105c7","references":[{"id":"containers","name":"kibanaSavedObjectMeta.searchSourceJSON.index","type":"index-pattern"}],"type":"visualization"}'
  2_logs-per-node-vis.ndjson: '{"attributes":{"description":"","kibanaSavedObjectMeta":{"searchSourceJSON":"{\"query\":{\"language\":\"kuery\",\"query\":\"\"},\"indexRefName\":\"kibanaSavedObjectMeta.searchSourceJSON.index\",\"filter\":[]}"},"title":"Logs
    per Node","uiStateJSON":"{\"vis\":{\"params\":{\"sort\":{\"columnIndex\":null,\"direction\":null}}}}","version":1,"visState":"{\"aggs\":[{\"enabled\":true,\"id\":\"1\",\"params\":{},\"schema\":\"metric\",\"type\":\"count\"},{\"enabled\":true,\"id\":\"2\",\"params\":{\"field\":\"host.hostname.keyword\",\"missingBucket\":false,\"missingBucketLabel\":\"Missing\",\"order\":\"desc\",\"orderBy\":\"1\",\"otherBucket\":false,\"otherBucketLabel\":\"Other\",\"size\":5},\"schema\":\"bucket\",\"type\":\"terms\"}],\"params\":{\"dimensions\":{\"buckets\":[{\"accessor\":0,\"aggType\":\"terms\",\"format\":{\"id\":\"terms\",\"params\":{\"id\":\"string\",\"missingBucketLabel\":\"Missing\",\"otherBucketLabel\":\"Other\"}},\"params\":{}}],\"metrics\":[{\"accessor\":1,\"aggType\":\"count\",\"format\":{\"id\":\"number\"},\"params\":{}}]},\"perPage\":10,\"percentageCol\":\"\",\"showMetricsAtAllLevels\":false,\"showPartialRows\":false,\"showTotal\":false,\"sort\":{\"columnIndex\":null,\"direction\":null},\"totalFunc\":\"sum\"},\"title\":\"Logs
    per Node\",\"type\":\"table\"}"},"id":"85aa89a0-547e-11ea-ac0b-5b9ac52105c7","references":[{"id":"journals","name":"kibanaSavedObjectMeta.searchSourceJSON.index","type":"index-pattern"}],"type":"visualization"}'
  2_logs-per-pod-vis.ndjson: '{"attributes":{"description":"","kibanaSavedObjectMeta":{"searchSourceJSON":"{\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"indexRefName\":\"kibanaSavedObjectMeta.searchSourceJSON.index\",\"filter\":[]}"},"title":"Logs
    per Pod","uiStateJSON":"{\"vis\":{\"params\":{\"sort\":{\"columnIndex\":null,\"direction\":null}}}}","version":1,"visState":"{\"title\":\"Logs
    per Pod\",\"type\":\"table\",\"params\":{\"perPage\":10,\"showPartialRows\":false,\"showMetricsAtAllLevels\":false,\"sort\":{\"columnIndex\":null,\"direction\":null},\"showTotal\":false,\"totalFunc\":\"sum\",\"percentageCol\":\"\",\"dimensions\":{\"metrics\":[{\"accessor\":1,\"format\":{\"id\":\"number\"},\"params\":{},\"aggType\":\"count\"}],\"buckets\":[{\"accessor\":0,\"format\":{\"id\":\"terms\",\"params\":{\"id\":\"string\",\"otherBucketLabel\":\"Other\",\"missingBucketLabel\":\"Missing\"}},\"params\":{},\"aggType\":\"terms\"}]}},\"aggs\":[{\"id\":\"1\",\"enabled\":true,\"type\":\"count\",\"schema\":\"metric\",\"params\":{}},{\"id\":\"2\",\"enabled\":true,\"type\":\"terms\",\"schema\":\"bucket\",\"params\":{\"field\":\"kubernetes.pod.name.keyword\",\"orderBy\":\"1\",\"order\":\"desc\",\"size\":5,\"otherBucket\":false,\"otherBucketLabel\":\"Other\",\"missingBucket\":false,\"missingBucketLabel\":\"Missing\"}}]}"},"id":"f2baf230-547b-11ea-ac0b-5b9ac52105c7","references":[{"id":"containers","name":"kibanaSavedObjectMeta.searchSourceJSON.index","type":"index-pattern"}],"type":"visualization"}'
  2_logs-per-unit-vis.ndjson: '{"attributes":{"description":"","kibanaSavedObjectMeta":{"searchSourceJSON":"{\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"indexRefName\":\"kibanaSavedObjectMeta.searchSourceJSON.index\",\"filter\":[]}"},"title":"Logs
    per Unit","uiStateJSON":"{\"vis\":{\"params\":{\"sort\":{\"columnIndex\":null,\"direction\":null}}}}","version":1,"visState":"{\"title\":\"Logs
    per Unit\",\"type\":\"table\",\"params\":{\"perPage\":10,\"showPartialRows\":false,\"showMetricsAtAllLevels\":false,\"sort\":{\"columnIndex\":null,\"direction\":null},\"showTotal\":false,\"totalFunc\":\"sum\",\"percentageCol\":\"\",\"dimensions\":{\"metrics\":[{\"accessor\":0,\"format\":{\"id\":\"number\"},\"params\":{},\"aggType\":\"count\"}],\"buckets\":[]}},\"aggs\":[{\"id\":\"1\",\"enabled\":true,\"type\":\"count\",\"schema\":\"metric\",\"params\":{}},{\"id\":\"2\",\"enabled\":true,\"type\":\"terms\",\"schema\":\"bucket\",\"params\":{\"field\":\"systemd.unit.keyword\",\"orderBy\":\"1\",\"order\":\"desc\",\"size\":5,\"otherBucket\":false,\"otherBucketLabel\":\"Other\",\"missingBucket\":false,\"missingBucketLabel\":\"Missing\"}}]}"},"id":"5a9b7a20-547f-11ea-ac0b-5b9ac52105c7","references":[{"id":"journals","name":"kibanaSavedObjectMeta.searchSourceJSON.index","type":"index-pattern"}],"type":"visualization"}'
  3_containers-logs-dashboard.ndjson: '{"attributes":{"description":"","hits":0,"kibanaSavedObjectMeta":{"searchSourceJSON":"{\"query\":{\"language\":\"kuery\",\"query\":\"\"},\"filter\":[]}"},"optionsJSON":"{\"hidePanelTitles\":false,\"useMargins\":true}","panelsJSON":"[{\"version\":\"7.5.2\",\"gridData\":{\"x\":0,\"y\":0,\"w\":24,\"h\":15,\"i\":\"0b6c4dde-bc5b-476b-93cd-b54b449c826c\"},\"panelIndex\":\"0b6c4dde-bc5b-476b-93cd-b54b449c826c\",\"embeddableConfig\":{},\"panelRefName\":\"panel_0\"},{\"version\":\"7.5.2\",\"gridData\":{\"x\":24,\"y\":0,\"w\":24,\"h\":15,\"i\":\"4fb87f9a-5303-40e9-a707-50ac78d9f324\"},\"panelIndex\":\"4fb87f9a-5303-40e9-a707-50ac78d9f324\",\"embeddableConfig\":{},\"panelRefName\":\"panel_1\"},{\"version\":\"7.5.2\",\"gridData\":{\"x\":0,\"y\":15,\"w\":48,\"h\":14,\"i\":\"ec551d1c-3c1f-4776-b148-4fb6d3d94be1\"},\"panelIndex\":\"ec551d1c-3c1f-4776-b148-4fb6d3d94be1\",\"embeddableConfig\":{},\"panelRefName\":\"panel_2\"}]","timeRestore":false,"title":"Container
    Logs","version":1},"id":"9419fb30-547c-11ea-ac0b-5b9ac52105c7","references":[{"id":"9136cde0-547b-11ea-ac0b-5b9ac52105c7","name":"panel_0","type":"visualization"},{"id":"f2baf230-547b-11ea-ac0b-5b9ac52105c7","name":"panel_1","type":"visualization"},{"id":"d1dd2370-547c-11ea-ac0b-5b9ac52105c7","name":"panel_2","type":"search"}],"type":"dashboard"}'
  3_journals-logs-dashboard.ndjson: '{"attributes":{"description":"","hits":0,"kibanaSavedObjectMeta":{"searchSourceJSON":"{\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filter\":[]}"},"optionsJSON":"{\"useMargins\":true,\"hidePanelTitles\":false}","panelsJSON":"[{\"version\":\"7.5.2\",\"gridData\":{\"x\":0,\"y\":0,\"w\":24,\"h\":15,\"i\":\"3270f7e1-c3ed-4322-a1ad-6759c58bbe28\"},\"panelIndex\":\"3270f7e1-c3ed-4322-a1ad-6759c58bbe28\",\"embeddableConfig\":{},\"panelRefName\":\"panel_0\"},{\"version\":\"7.5.2\",\"gridData\":{\"x\":24,\"y\":0,\"w\":24,\"h\":15,\"i\":\"996ed374-7dc4-4e91-ab54-0b98ea704357\"},\"panelIndex\":\"996ed374-7dc4-4e91-ab54-0b98ea704357\",\"embeddableConfig\":{},\"panelRefName\":\"panel_1\"},{\"version\":\"7.5.2\",\"gridData\":{\"x\":0,\"y\":15,\"w\":48,\"h\":15,\"i\":\"7637771c-7db8-4f2b-9d10-0ea1e32c1399\"},\"panelIndex\":\"7637771c-7db8-4f2b-9d10-0ea1e32c1399\",\"embeddableConfig\":{},\"panelRefName\":\"panel_2\"}]","timeRestore":false,"title":"Journals
    Logs","version":1},"id":"8d30b220-547f-11ea-ac0b-5b9ac52105c7","references":[{"id":"5a9b7a20-547f-11ea-ac0b-5b9ac52105c7","name":"panel_0","type":"visualization"},{"id":"85aa89a0-547e-11ea-ac0b-5b9ac52105c7","name":"panel_1","type":"visualization"},{"id":"50aa6c20-547e-11ea-ac0b-5b9ac52105c7","name":"panel_2","type":"search"}],"type":"dashboard"}'
---
# Source: kubernetes-logging/templates/logstash/logstash-indexer-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: elk-logstash-indexer
  labels:     
    app: elk-kubernetes-logging
    chart: kubernetes-logging-0.8.0
    release: elk
    heritage: Helm
data:
  pipelines.yml: |-
    - pipeline.id: containers-pipeline.conf
      pipeline.workers: 8
      path.config: /usr/share/logstash/pipeline/containers-pipeline.conf
    - pipeline.id: journals-pipeline.conf
      pipeline.workers: 8
      path.config: /usr/share/logstash/pipeline/journals-pipeline.conf
  log4j2.properties: |-
    status = error
    name = LogstashPropertiesConfig

    appender.console.type = Console
    appender.console.name = plain_console
    appender.console.layout.type = PatternLayout
    appender.console.layout.pattern = [%d{ISO8601}][%-5p][%-25c] %m%n

    appender.json_console.type = Console
    appender.json_console.name = json_console
    appender.json_console.layout.type = JSONLayout
    appender.json_console.layout.compact = true
    appender.json_console.layout.eventEol = true

    rootLogger.level = ${sys:ls.log.level}

    rootLogger.appenderRef.console.ref = ${sys:ls.log.format}_console

    logger.elasticsearchoutput.name = logstash.outputs.elasticsearch
    logger.elasticsearchoutput.level = info
    
    logger.inputs_kafka.name=logstash.inputs.kafka
    logger.inputs_kafka.level=warn

    logger.filters_json.name=logstash.filters.json
    logger.filters_json.level=error
    
    #logger.inputs.name=logstash.inputs.file
    #logger.inputs.level=warn
    #logger.outputs.name=logstash.outputs.kafka
    #logger.outputs.level=debug
    #logger.pipeline.name=logstash.pipeline
    #logger.pipeline.level=debug
    #logger.grok.name=logstash.filters.grok
    #logger.grok.level=debug
    #logger.mutate.name=logstash.filters.mutate
    #logger.mutate.level=debug
    #logger.kafka_consumer.name=org.apache.kafka.clients.consumer.KafkaConsumer
    #logger.kafka_consumer.level=debug

  logstash.yml: |-
    http.host: "0.0.0.0"
    #path.config: /usr/share/logstash/pipeline/*-pipeline.conf
    path.settings: /usr/share/logstash/config
    queue.type: persisted
    pipeline.batch.size: 125
---
# Source: kubernetes-logging/templates/logstash/logstash-indexer-pipelines-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: elk-logstash-indexer-pipelines
data:  
  containers-pipeline.conf: |-
    input {  
    
      beats {
        port => 5044
      }
    
    }
    
    filter {
      #all messages from the kafka topics are in json format
    
      #remove ANSI Color bytes
      mutate {
        gsub => ["message", "\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]", ""]
      }
    
      #all application json formated logs can be parsed
      # we parse the payload of the message field for json
        json {
          skip_on_invalid_json => false
          source => "message"
          add_tag => [ "json_parsed_successful" ]
        }  
    
      #use beats generated id
      mutate {
        add_field => { "id" => "%{[@metadata][_id]}" }
      }
    
    }
    
    output {
      
      # all other containers stdout and stderr go to container ES index
      elasticsearch {
        hosts => ["${ELASTICSEARCH_HOST}"]
        user => "${ELASTICSEARCH_USER:\"\"}"
        password => "${ELASTICSEARCH_PASSWORD:\"\"}"
        index => "containers-%{+YYYY.MM.dd}"
        cacert => "/usr/share/logstash/config/${CA_CERT}"
        ssl => "true"
        manage_template => true
        template => "/usr/share/logstash/config/containers_template.json"
        template_name => "containers_1"
        template_overwrite => true
        ilm_enabled => "false"
        document_id => "%{id}"
      }
      
    }
    
  
  journals-pipeline.conf: |-
    input {  
    
      beats {
        port => 5045
      }
    
    }
    
    filter {
      #all messages from journalbeats are in json format
      json {
        skip_on_invalid_json => false
        source => "message"
      }
      
      #use beats generated id
      mutate {
        add_field => { "id" => "%{[@metadata][_id]}" }
      }
    
    }
    output {
      elasticsearch {
        hosts => ["${ELASTICSEARCH_HOST}"]
        user => "${ELASTICSEARCH_USER:\"\"}"
        password => "${ELASTICSEARCH_PASSWORD:\"\"}"       
        index => "journals-%{+YYYY.MM.dd}"
        cacert => "/usr/share/logstash/config/${CA_CERT}"
        ssl => "true"
        manage_template => true
        template => "/usr/share/logstash/config/journals_template.json"
        template_name => "journals_1"
        template_overwrite => true
        ilm_enabled => "false"
        document_id => "%{id}"
      }
    }
---
# Source: kubernetes-logging/templates/logging-rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: elk
  labels:     
    app: elk-kubernetes-logging
    chart: kubernetes-logging-0.8.0
    release: elk
    heritage: Helm
rules:
- apiGroups:
  - ""
  resources:
  - services
  - namespaces
  - endpoints
  - pods
  verbs:
  - get
  - watch
  - list
---
# Source: kubernetes-logging/templates/logging-rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: elk-psp
  labels:     
    app: elk-kubernetes-logging
    chart: kubernetes-logging-0.8.0
    release: elk
    heritage: Helm
rules:
- apiGroups:
  - extensions
  resources:
  - podsecuritypolicies
  resourceNames:
  - elk  
  verbs:
  - use
---
# Source: kubernetes-logging/templates/logging-rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: elk
  labels:     
    app: elk-kubernetes-logging
    chart: kubernetes-logging-0.8.0
    release: elk
    heritage: Helm
subjects:
- kind: ServiceAccount
  name: elk
  namespace: logging
- kind: ServiceAccount
  name: elk-priv
  namespace: logging  
roleRef:
  kind: ClusterRole
  name: elk
  apiGroup: rbac.authorization.k8s.io
---
# Source: kubernetes-logging/templates/logging-rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: elk-psp
  labels:     
    app: elk-kubernetes-logging
    chart: kubernetes-logging-0.8.0
    release: elk
    heritage: Helm
subjects:
- kind: ServiceAccount
  name: elk-priv
  namespace: logging
roleRef:
  kind: ClusterRole
  name: elk-psp
  apiGroup: rbac.authorization.k8s.io
---
# Source: kubernetes-logging/templates/elasticsearch/es-client-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: elk-client
  labels:     
    app: elk-kubernetes-logging
    chart: kubernetes-logging-0.8.0
    release: elk
    heritage: Helm
spec:
  ports:
  - name: http
    port: 9200
    targetPort: http
  selector:     
    app: elk-kubernetes-logging
    release: elk
    type: client
  type: ClusterIP
---
# Source: kubernetes-logging/templates/elasticsearch/es-data-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: elk-data
  labels:     
    app: elk-kubernetes-logging
    chart: kubernetes-logging-0.8.0
    release: elk
    heritage: Helm
spec:
  ports:
  - name: transport
    port: 9300
    targetPort: transport
  selector:     
    app: elk-kubernetes-logging
    release: elk
    node: es
    type: data
  type: ClusterIP
---
# Source: kubernetes-logging/templates/elasticsearch/es-master-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: elk-master
  labels:     
    app: elk-kubernetes-logging
    chart: kubernetes-logging-0.8.0
    release: elk
    heritage: Helm
spec:
  type: ClusterIP
  clusterIP: None
  selector:     
    app: elk-kubernetes-logging
    release: elk
    node: es
    type: master
  ports:
  - name: transport
    port: 9300
    targetPort: transport
    protocol: TCP
---
# Source: kubernetes-logging/templates/kibana/kibana-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: elk-kibana
  labels:     
    app: elk-kubernetes-logging
    chart: kubernetes-logging-0.8.0
    release: elk
    heritage: Helm
spec:
  ports:
  - name: ui
    port: 5601
    targetPort: ui
  selector:     
    app: elk-kubernetes-logging
    release: elk
    type: kibana
  type: ClusterIP
---
# Source: kubernetes-logging/templates/logstash/logstash-indexer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: elk-logstash-indexer
  labels:     
    app: elk-kubernetes-logging
    chart: kubernetes-logging-0.8.0
    release: elk
    heritage: Helm
spec:
  ports:
  - name: containers
    port: 5044
    targetPort: containers
  - name: journals
    port: 5045
    targetPort: journals  
  selector:     
    app: elk-kubernetes-logging
    release: elk
    type: logstash-indexer
  type: ClusterIP
---
# Source: kubernetes-logging/templates/beats/filebeat-daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: elk-filebeat
  labels:     
    app: elk-kubernetes-logging
    chart: kubernetes-logging-0.8.0
    release: elk
    heritage: Helm
    type: filebeat
spec:
  selector:
    matchLabels:       
      app: elk-kubernetes-logging
      release: elk
      k8s-app: filebeat  
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:         
        app: elk-kubernetes-logging
        release: elk
        k8s-app: filebeat
    spec:
      securityContext:
        runAsUser: 0
      serviceAccountName: elk-priv
      terminationGracePeriodSeconds: 30
      priorityClassName: logging-critical
      initContainers:
      - name: init
        imagePullPolicy: IfNotPresent
        image: nickytd/init-container:latest
        command: ["sh","-c",'/init.sh https://elk-client.logging.svc.cluster.local:9200 && /init.sh elk-logstash-indexer 5044']
        volumeMounts:
        - mountPath: "/init.sh"
          subPath: init.sh
          name: init       
      containers:
      - name: filebeat
        image: docker.elastic.co/beats/filebeat:7.8.0
        args: [
          "-c", "/usr/share/filebeat/filebeat.yml",
          "-e",
        ]
        resources:
          limits:
            memory: 300Mi
          requests:
            cpu: 100m
            memory: 100Mi
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        volumeMounts:
        - name: config
          mountPath: /usr/share/filebeat/filebeat.yml
          readOnly: true
          subPath: filebeat.yml
        - name: data
          mountPath: /usr/share/filebeat/data
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
      volumes:
      - name: init
        configMap:
          name: elk-init
          defaultMode: 0755  
      - name: config
        configMap:
          name: elk-filebeat-config
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
          type: Directory
      - name: data
        emptyDir: {}
---
# Source: kubernetes-logging/templates/beats/journalbeat-daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: elk-journalbeat
  labels:     
    app: elk-kubernetes-logging
    chart: kubernetes-logging-0.8.0
    release: elk
    heritage: Helm
    type: journalbeat
spec:
  selector:
    matchLabels:       
      app: elk-kubernetes-logging
      release: elk
      k8s-app: journalbeat      
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:         
        app: elk-kubernetes-logging
        release: elk
        k8s-app: journalbeat
    spec:
      securityContext:
        runAsUser: 0
      serviceAccountName: elk-priv
      terminationGracePeriodSeconds: 30
      priorityClassName: logging-critical
      initContainers:
      - name: init  
        imagePullPolicy: IfNotPresent
        image: nickytd/init-container:latest
        command: ["sh","-c",'/init.sh https://elk-client.logging.svc.cluster.local:9200 && /init.sh elk-logstash-indexer 5044']
        volumeMounts:
        - mountPath: "/init.sh"
          subPath: init.sh
          name: init 
      containers:
      - name: journalbeat
        image: docker.elastic.co/beats/journalbeat:7.8.0
        #image: mheese/journalbeat:latest
        args: [
          "-c", "/usr/share/journalbeat/journalbeat.yml",
          "-e"
        ]
        resources:
          limits:
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 100Mi
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        volumeMounts:
        - name: config
          mountPath: /usr/share/journalbeat/journalbeat.yml
          readOnly: true
          subPath: journalbeat.yml
        - name: journallog
          mountPath: /var/run/log/journal
        - name: systemd
          mountPath: /run/systemd
          readOnly: true
        - name: data
          mountPath: /usr/share/journalbeat/data 
      volumes:
      - name: init
        configMap:
          name: elk-init
          defaultMode: 0755  
      - name: config
        configMap:
          name: elk-journalbeat-config
      - name: journallog
        hostPath:
          path: /var/run/log/journal
          type: Directory
      - name: systemd
        hostPath:
          path: /run/systemd 
      - name: data
        emptyDir: {}
---
# Source: kubernetes-logging/templates/elasticsearch/es-client-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elk-client
  labels:     
    app: elk-kubernetes-logging
    chart: kubernetes-logging-0.8.0
    release: elk
    heritage: Helm
    node: es
spec:
  replicas: 1
  selector:
    matchLabels:       
      app: elk-kubernetes-logging
      release: elk
      type: client
      node: es
  template:
    metadata:
      annotations:
        checksum/config: 6066f51632f0beed8631abffd2c9e39bf3639fdb42567257a722d8761487e196
        checksum/secret: 44b1b2af64832e7c1e50e766365e7c62b665a185f414e8f98c5d73cb66908268
      labels:         
        app: elk-kubernetes-logging
        release: elk
        type: client
        node: es
    spec:
      serviceAccountName: elk-priv
      containers:
      - name: main
        image: amazon/opendistro-for-elasticsearch:1.8.0        
        resources: 
          requests:
            cpu: 200m
            memory: 512Mi
        readinessProbe:
          tcpSocket:
            port: http
          initialDelaySeconds: 10
        livenessProbe:
          tcpSocket:
            port: transport
          initialDelaySeconds: 60
          periodSeconds: 10
        ports:
        - containerPort: 9300
          name: transport
          protocol: TCP
        - containerPort: 9200
          name: http
          protocol: TCP
        volumeMounts:
        - name: elasticsearch
          mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
          subPath: elasticsearch.yml
        - name: elasticsearch
          mountPath: /usr/share/elasticsearch/config/log4j2.properties
          subPath: log4j2.properties
        - name: es-data
          mountPath: /data
        - name: certificates
          mountPath: /usr/share/elasticsearch/config/node.pem
          subPath: node.pem
        - name: certificates
          mountPath: /usr/share/elasticsearch/config/node-key.pem
          subPath: node-key.pem
        - name: certificates
          mountPath: /usr/share/elasticsearch/config/root-ca.pem
          subPath: root-ca.pem
        - name: certificates
          mountPath: /usr/share/elasticsearch/config/elk-rest.pem
          subPath: elk-rest.pem
        - name: certificates
          mountPath: /usr/share/elasticsearch/config/elk-rest-key.pem
          subPath: elk-rest-key.pem
        - name: certificates
          mountPath: /usr/share/elasticsearch/config/elasticsearch.truststore
          subPath: elasticsearch.truststore
        - name: certificates
          mountPath: /usr/share/elasticsearch/config/http.truststore
          subPath: http.truststore          
        env:
        - name: ES_JAVA_OPTS
          value: "-Xms512m -Xmx512m \
                  -Djava.net.preferIPv4Stack=true -XshowSettings:properties -XshowSettings:vm -XshowSettings:system \
                  -Djava.util.logging.config.file=/usr/share/elasticsearch/config/logging.properties"
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_MASTER
          value: "false"
        - name: NODE_DATA
          value: "false"
        - name: NODE_INGEST
          value: "false"
        - name: discovery.seed_hosts
          value: elk-master
      # Elasticsearch requires vm.max_map_count to be at least 262144.
      # If your OS already sets up this number to a higher value, feel free
      # to remove this init container.
      initContainers:
      - image: nickytd/init-container:latest
        command: ["sh", "-c", "/init.sh elk-master 9300 && /sbin/sysctl -w vm.max_map_count=262144 || true && chown 1000:1000  /data && if [ -d /snapshot ]; then chown 1000:1000 /snapshot ; fi"]
        name: init
        volumeMounts:
        - name: es-data
          mountPath: /data 
        - mountPath: "/init.sh"
          subPath: init.sh
          name: init          
        securityContext:
          runAsUser: 0
          privileged: true  
      volumes:
      - name: elasticsearch
        configMap:
          name: elk
      - name: init
        configMap:
          name: elk-init
          defaultMode: 0755          
      - name: es-data
        emptyDir: {}
      - name: certificates
        secret:
          secretName: elk-certificates
      - name: securityconfig
        secret:
          secretName: elk-securityconfig
---
# Source: kubernetes-logging/templates/kibana/kibana-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elk-kibana
  labels:     
    app: elk-kubernetes-logging
    chart: kubernetes-logging-0.8.0
    release: elk
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:       
      app: elk-kubernetes-logging
      release: elk
      type: kibana
  template:
    metadata:
      annotations:
        checksum/config: 8d09b30917f8661116ebf6df9cb3c3834c8ca91f13b5d20eecbf2ace422d56bb
      labels:         
        app: elk-kubernetes-logging
        release: elk
        type: kibana
    spec:
      initContainers:
      - name: init
        image: nickytd/init-container:latest
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c", '/init.sh https://elk-client.logging.svc.cluster.local:9200']
        volumeMounts:
        - mountPath: "/init.sh"
          subPath: init.sh
          name: init
      containers: 
      - name: main
        image: amazon/opendistro-for-elasticsearch-kibana:1.8.0
        resources:
          requests:
            cpu: 200m
            memory: 1Gi
        env:              
        ports:
        - containerPort: 5601
          name: ui
          protocol: TCP
        volumeMounts:
        - mountPath: "/opt/kibana/config/kibana.yml"
          subPath: kibana.yml
          name: config
        - name: certificates
          mountPath: /opt/kibana/config/root-ca.pem
          subPath: root-ca.pem  
        - name: certificates
          mountPath: /opt/kibana/config/admin.pem
          subPath: admin.pem  
        - name: certificates
          mountPath: /opt/kibana/config/admin-key.pem
          subPath: admin-key.pem         
      volumes:
      - name: config
        configMap:
          name: elk-kibana
      - name: init
        configMap:
          name: elk-init
          defaultMode: 0755
      - name: certificates
        secret:
          secretName: elk-certificates
---
# Source: kubernetes-logging/templates/logstash/logstash-indexer-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elk-logstash-indexer
  labels:     
    app: elk-kubernetes-logging
    chart: kubernetes-logging-0.8.0
    release: elk
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:       
      app: elk-kubernetes-logging
      release: elk
      type: logstash-indexer
  strategy:
    type: Recreate    
  template:
    metadata:
      annotations:
        checksum1/config: 6dc66f8d8be3b68077a5e31ac33347dbec246bfd81df012f4be30d9e2ca029d8
        checksum-logstash-indexer-pipelines/containers-pipeline.conf: 307c0273996f13e1f03a61d00d383c69e290c18f9166a85e44dd7a788eb13c07
        checksum-logstash-indexer-pipelines/journals-pipeline.conf: 63a3a788ee8f3653104f941990976764b27b7bd6fd3224b38663dd2dacc931fd
      labels:         
        app: elk-kubernetes-logging
        release: elk
        type: logstash-indexer
    spec:
      initContainers:
      - name: init
        image: nickytd/init-container:latest
        imagePullPolicy: IfNotPresent
        command: 
        - sh
        - -c
        - /init.sh https://elk-client.logging.svc.cluster.local:9200
        volumeMounts:
        - mountPath: "/init.sh"
          subPath: init.sh
          name: init     
      containers:  
      - name: logstash-indexer
        image: docker.elastic.co/logstash/logstash-oss:7.8.0
        ports:
        - containerPort: 5044
          name: containers
          protocol: TCP
        - containerPort: 5045
          protocol: TCP
          name: journals      
        env:
        - name: ELASTICSEARCH_HOST
          valueFrom:
            secretKeyRef:
              name: logstash-indexer-elasticsearch
              key: host
        - name: ELASTICSEARCH_USER
          valueFrom:
            secretKeyRef:
              name: logstash-indexer-elasticsearch
              key: user
        - name: ELASTICSEARCH_PASSWORD
          valueFrom:
            secretKeyRef:
              name: logstash-indexer-elasticsearch
              key: password          
        - name: LS_JAVA_OPTS
          value: "-Xms512m -Xmx512m -Djava.net.preferIPv4Stack=true -XshowSettings:properties -XshowSettings:vm -XshowSettings:system"
        - name: CA_CERT
          value: "root-ca.pem"
        resources: 
          requests:
            cpu: 1000m
            memory: 512Mi  
        volumeMounts:
        - mountPath: "/usr/share/logstash/config/logstash.yml"
          subPath: logstash.yml
          name: config
        - mountPath: "/usr/share/logstash/config/pipelines.yml"
          subPath: pipelines.yml
          name: config
        - mountPath: "/usr/share/logstash/config/log4j2.properties"
          subPath: log4j2.properties
          name: config
        - mountPath: /usr/share/logstash/pipeline/containers-pipeline.conf
          subPath: containers-pipeline.conf
          name: pipelines
        - mountPath: /usr/share/logstash/pipeline/journals-pipeline.conf
          subPath: journals-pipeline.conf
          name: pipelines
        - mountPath: /usr/share/logstash/config/containers_template.json
          subPath: containers_template.json
          name: indices-templates
        - mountPath: /usr/share/logstash/config/journals_template.json
          subPath: journals_template.json
          name: indices-templates
        - name: certificates
          mountPath: /usr/share/logstash/config/root-ca.pem
          subPath: root-ca.pem
      volumes:
      - name: config
        configMap:
          name: elk-logstash-indexer
      - name: certificates
        secret:
          secretName: elk-certificates
          defaultMode: 0644
      - name: init
        configMap:
          name: elk-init
          defaultMode: 0755    
      - name: pipelines
        configMap:
          name: elk-logstash-indexer-pipelines
      - name: indices-templates
        configMap:
          name: elk-indices-templates
---
# Source: kubernetes-logging/templates/elasticsearch/es-data-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elk-data
  labels:     
    app: elk-kubernetes-logging
    chart: kubernetes-logging-0.8.0
    release: elk
    heritage: Helm
spec:
  updateStrategy:
    type: RollingUpdate
  serviceName: elk-data
  replicas: 1
  selector:
    matchLabels:       
      app: elk-kubernetes-logging
      release: elk
      node: es
      type: data
  template:
    metadata:
      annotations:
        checksum/config: 6066f51632f0beed8631abffd2c9e39bf3639fdb42567257a722d8761487e196
        checksum/secret: 44b1b2af64832e7c1e50e766365e7c62b665a185f414e8f98c5d73cb66908268
      labels:         
        app: elk-kubernetes-logging
        release: elk
        node: es
        type: data
    spec:
      priorityClassName: logging-critical
      serviceAccountName: elk-priv
      priorityClassName: logging-critical
      containers:
      - name: main
        image: amazon/opendistro-for-elasticsearch:1.8.0
        resources: 
          requests:
            cpu: 1000m
            memory: 1Gi
        livenessProbe:
          tcpSocket:
            port: transport
          initialDelaySeconds: 60
          periodSeconds: 10
        ports:
        - containerPort: 9300
          name: transport
          protocol: TCP
        volumeMounts:
        - name: es-data
          mountPath: /data          
        - name: elasticsearch
          mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
          subPath: elasticsearch.yml
        - name: elasticsearch
          mountPath: /usr/share/elasticsearch/config/log4j2.properties
          subPath: log4j2.properties  
        - name: certificates
          mountPath: /usr/share/elasticsearch/config/node.pem
          subPath: node.pem
        - name: certificates
          mountPath: /usr/share/elasticsearch/config/node-key.pem
          subPath: node-key.pem
        - name: certificates
          mountPath: /usr/share/elasticsearch/config/root-ca.pem
          subPath: root-ca.pem
        - name: certificates
          mountPath: /usr/share/elasticsearch/config/elk-rest.pem
          subPath: elk-rest.pem
        - name: certificates
          mountPath: /usr/share/elasticsearch/config/elk-rest-key.pem
          subPath: elk-rest-key.pem
        - name: certificates
          mountPath: /usr/share/elasticsearch/config/elasticsearch.truststore
          subPath: elasticsearch.truststore
        - name: certificates
          mountPath: /usr/share/elasticsearch/config/http.truststore 
          subPath: http.truststore        
        env:
        - name: "NAMESPACE"
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: "MINIMUM_MASTER_NODES"
          value: "1"
        - name: ES_JAVA_OPTS
          value: "-Xms1g -Xmx1g -Djava.net.preferIPv4Stack=true -XshowSettings:properties -XshowSettings:vm -XshowSettings:system"
        - name: NODE_MASTER
          value: "false"  
        - name: discovery.seed_hosts
          value: elk-master  
      volumes:
      - name: elasticsearch
        configMap:
          name: elk  
      - name: certificates
        secret:
          secretName: elk-certificates
      - name: securityconfig
        secret:
          secretName: elk-securityconfig    
      # Elasticsearch requires vm.max_map_count to be at least 262144.
      # If your OS already sets up this number to a higher value, feel free
      # to remove this init container.
      initContainers:
      - name: init
        image: nickytd/init-container:latest
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c", "/sbin/sysctl -w vm.max_map_count=262144 || true && chown 1000:1000  /data && if [ -d /snapshot ]; then chown 1000:1000 /snapshot ; fi"]
        volumeMounts:
        - name: es-data
          mountPath: /data           
        securityContext:
          runAsUser: 0
          privileged: true    
  volumeClaimTemplates:
  - metadata:
      name: es-data
    spec:
      storageClassName: 
      resources:
        requests:
          storage: 1Gi
      accessModes:
      - ReadWriteOnce
---
# Source: kubernetes-logging/templates/elasticsearch/es-master-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name:  elk-master
  labels:     
    app: elk-kubernetes-logging
    chart: kubernetes-logging-0.8.0
    release: elk
    heritage: Helm
    node: es
spec:
  updateStrategy:
    type: RollingUpdate
  serviceName: elk-master
  replicas: 1
  selector:
    matchLabels:       
      app: elk-kubernetes-logging
      release: elk
      type: master
      node: es
  template:
    metadata:
      annotations:
        checksum/config: 6066f51632f0beed8631abffd2c9e39bf3639fdb42567257a722d8761487e196
        checksum/secret: 44b1b2af64832e7c1e50e766365e7c62b665a185f414e8f98c5d73cb66908268
      labels:         
        app: elk-kubernetes-logging
        release: elk
        type: master
        node: es
    spec:
      serviceAccountName: elk-priv
      containers:
      - name: main
        image: amazon/opendistro-for-elasticsearch:1.8.0
        resources: 
          requests:
            cpu: 200m
            memory: 512Mi
        ports:
        - containerPort: 9300
          name: transport
        - containerPort: 9200
          name: http
        - containerPort: 9600
          name: metrics
        volumeMounts:
        - name: es-data
          mountPath: /data          
        - name: elasticsearch
          mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
          subPath: elasticsearch.yml
        - name: elasticsearch
          mountPath: /usr/share/elasticsearch/config/log4j2.properties
          subPath: log4j2.properties  
        - name: certificates
          mountPath: /usr/share/elasticsearch/config/node.pem
          subPath: node.pem
        - name: certificates
          mountPath: /usr/share/elasticsearch/config/node-key.pem
          subPath: node-key.pem
        - name: certificates
          mountPath: /usr/share/elasticsearch/config/root-ca.pem
          subPath: root-ca.pem
        - name: certificates
          mountPath: /usr/share/elasticsearch/config/elk-rest.pem
          subPath: elk-rest.pem
        - name: certificates
          mountPath: /usr/share/elasticsearch/config/elk-rest-key.pem
          subPath: elk-rest-key.pem
        - name: certificates
          mountPath: /usr/share/elasticsearch/config/elasticsearch.truststore
          subPath: elasticsearch.truststore  
        - name: certificates
          mountPath: /usr/share/elasticsearch/config/http.truststore
          subPath: http.truststore  
        - name: certificates
          mountPath: /usr/share/elasticsearch/config/keystore.jks
          subPath: keystore.jks        
        env:
        - name: "NAMESPACE"
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: "MINIMUM_MASTER_NODES"
          value: "1"
        - name: ES_JAVA_OPTS
          value: "-Xms512m -Xmx512m -Djava.net.preferIPv4Stack=true -XshowSettings:properties -XshowSettings:vm -XshowSettings:system"
        - name: NODE_DATA
          value: "false"
        - name: NODE_INGEST
          value: "false"
        - name: discovery.seed_hosts
          value: elk-master  
        readinessProbe:
          tcpSocket:
            port: http
          initialDelaySeconds: 10
        livenessProbe:
          tcpSocket:
            port: transport
          initialDelaySeconds: 60
          periodSeconds: 10
      volumes:
      - name: elasticsearch
        configMap:
          name: elk    
      - name: certificates
        secret:
          secretName: elk-certificates
      - name: securityconfig
        secret:
          secretName: elk-securityconfig    
      # Elasticsearch requires vm.max_map_count to be at least 262144.
      # If your OS already sets up this number to a higher value, feel free
      # to remove this init container.
      initContainers:
      - name: init
        image: nickytd/init-container:latest
        imagePullPolicy: IfNotPresent
        command: ["sh","-c","/sbin/sysctl -w vm.max_map_count=262144 || true && chown 1000:1000 /data && if [ -d /snapshot ]; then chown 1000:1000 /snapshot ; fi"]
        volumeMounts:
        - name: es-data
          mountPath: /data          
        securityContext:
          privileged: true  
          runAsUser: 0
  volumeClaimTemplates:
  - metadata:
      name: es-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
---
# Source: kubernetes-logging/templates/elasticsearch/es-curator-cronjob.yaml
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: elk-curator
  labels:     
    app: elk-kubernetes-logging
    chart: kubernetes-logging-0.8.0
    release: elk
    heritage: Helm
spec:
  schedule: "10 0 * * *"
  jobTemplate:
    spec:
      template:
        metadata:
          labels:             
            app: elk-kubernetes-logging
            chart: kubernetes-logging-0.8.0
            release: elk
            heritage: Helm            
            type: es-curator
        spec:
          initContainers:
          - name: init
            image: nickytd/init-container:latest
            imagePullPolicy: IfNotPresent
            command: ["sh", "-c", "/init.sh elk-client 9200 && /init.sh elk-master 9300"]
            volumeMounts:
            - mountPath: "/init.sh"
              subPath: init.sh
              name: init
          containers:
          - name: es-curator
            image: nickytd/es-curator:5.8
            env:
            - name: ES_HOST
              value: https://elk-client.logging.svc.cluster.local:9200
            command: ["/curator/curator", "--config", "/config/curator.yml", "/config/actions.yml"]
            volumeMounts:
            - name: curator
              mountPath: "/config"
            - name: certificates
              mountPath: /etc/root-ca.pem
              subPath: root-ca.pem  
          restartPolicy: OnFailure
          volumes:
          - name: init
            configMap:
              name: elk-init
              defaultMode: 0755 
          - name: curator
            configMap:
              name: elk-curator
          - name: certificates
            secret:
              secretName: elk-certificates
---
# Source: kubernetes-logging/templates/logging-priorityclass.yaml
apiVersion: scheduling.k8s.io/v1beta1
description: Used for addons critical pods that must not be moved from their current node. Example pods from daemonsets collection logs from the minions
kind: PriorityClass
metadata:
  name: logging-critical
value: 500
---
# Source: kubernetes-logging/templates/elasticsearch/es-aliases-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: elk-aliases
  labels:     
    app: elk-kubernetes-logging
    chart: kubernetes-logging-0.8.0
    release: elk
    heritage: Helm
  annotations:
    "helm.sh/hook": "post-upgrade"
    "helm.sh/hook-weight": "-8"
    "helm.sh/hook-delete-policy": "before-hook-creation"
spec:
  backoffLimit: 10
  template:
    metadata:
      labels:         
        app: elk-kubernetes-logging
        chart: kubernetes-logging-0.8.0
        release: elk
        heritage: Helm            
        type: es-aliases
    spec:
      restartPolicy: OnFailure
      initContainers:
      - name: init
        image: nickytd/init-container:latest
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c", "/init.sh elk-client 9200 && /init.sh elk-master 9300"]
        volumeMounts:
        - mountPath: "/init.sh"
          subPath: init.sh
          name: init
      containers: 
      - name: es-curator
        image: nickytd/es-curator:5.8
        env:
        - name: ES_HOST
          value: https://elk-client.logging.svc.cluster.local:9200
        command: ["/curator/curator", "--config", "/config/curator.yml", "/config/actions.yml"]
        volumeMounts:
        - name: curator
          mountPath: "/config"
        - name: certificates
          mountPath: /etc/root-ca.pem
          subPath: root-ca.pem
      volumes:
      - name: init
        configMap:
          name: elk-init
          defaultMode: 0755  
      - name: curator
        configMap:
          name: elk-curator
      - name: certificates
        secret:
          secretName: elk-certificates
---
# Source: kubernetes-logging/templates/elasticsearch/es-securityadmin-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: elk-securityadmin
  labels:     
    app: elk-kubernetes-logging
    chart: kubernetes-logging-0.8.0
    release: elk
    heritage: Helm
  annotations:
    "helm.sh/hook": "post-install,post-upgrade"
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": "before-hook-creation"
spec:
  backoffLimit: 10
  template:
    spec:
      restartPolicy: OnFailure
      initContainers:
      - name: init
        image: nickytd/init-container:latest
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c", "/init.sh elk-client 9200 && /init.sh elk-master 9300"]
        volumeMounts:
        - mountPath: "/init.sh"
          subPath: init.sh
          name: init
      containers:
      - name: main
        image: amazon/opendistro-for-elasticsearch:1.8.0
        command: ["/setup.sh"]
        env:
          - name: es_node
            value: elk-master
          - name: es_user
            value: esadmin
          - name: es_pass
            value: esadmin
          - name: ki_user
            value: kibana
          - name: ki_pass
            value: kibana      
        volumeMounts:
        - name: setup
          mountPath: /setup.sh
          subPath: setup.sh
        - name: certificates
          mountPath: /usr/share/elasticsearch/config/node.pem
          subPath: node.pem  
        - name: certificates
          mountPath: /usr/share/elasticsearch/config/node-key.pem
          subPath: node-key.pem
        - name: certificates
          mountPath: /usr/share/elasticsearch/config/root-ca.pem
          subPath: root-ca.pem
        - name: certificates
          mountPath: /usr/share/elasticsearch/config/admin.pem
          subPath: admin.pem  
        - name: certificates
          mountPath: /usr/share/elasticsearch/config/admin-key.pem
          subPath: admin-key.pem
        - name: securityconfig
          mountPath: /usr/share/elasticsearch/plugins/opendistro_security/securityconfig  
        - name: certificates
          mountPath: /usr/share/elasticsearch/config/http.truststore
          subPath: http.truststore  
      volumes:
      - name: certificates
        secret:
          secretName: elk-certificates
      - name: securityconfig
        secret:
          secretName: elk-securityconfig
          defaultMode: 0755
      - name: init
        configMap:
          name: elk-init
          defaultMode: 0755
      - name: setup
        configMap:
          name: elk-securityadmin
          defaultMode: 0755
---
# Source: kubernetes-logging/templates/kibana/kibana-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: elk-kibana-create-index-pattern
  labels:     
    app: elk-kubernetes-logging
    chart: kubernetes-logging-0.8.0
    release: elk
    heritage: Helm
  annotations:
    "helm.sh/hook": "post-install,post-upgrade"
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": "before-hook-creation"
spec:
  backoffLimit: 0
  template:
    spec:
      restartPolicy: Never
      initContainers:
      - name: init
        image: nickytd/init-container:latest
        imagePullPolicy: IfNotPresent
        command: ["sh", "-xc", 'while (true) do if [ $(curl -s -o /dev/null -w \"%{http_code}\" -u kibana:kibana http://elk-kibana.logging.svc.cluster.local:5601/status) = \"200\" ]; then echo "ready"; exit 0; fi; echo \"retry request http://elk-kibana.logging.svc.cluster.local:5601/status\"; sleep 2; done']        
      containers:
      - name: main
        image: amazon/opendistro-for-elasticsearch-kibana:1.8.0        
        command: ["bash","/tmp/create_index_pattern.sh", http://elk-kibana.logging.svc.cluster.local:5601, "containers,journals", "kibana", "kibana"]        
        volumeMounts:
        - mountPath: "/tmp/create_index_pattern.sh"
          subPath: create_index_pattern.sh
          name: config
        - mountPath: "/tmp/saved_objects"
          name: saved-objects
      volumes:
      - name: config
        configMap:
          name: elk-kibana
      - name: saved-objects
        configMap:    
          name: elk-kibana-saved-objects
