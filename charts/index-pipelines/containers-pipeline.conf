input {

  kafka {
    bootstrap_servers => ["${kafka_brokers}"]
    topics => ["containers"]
    client_id => "${HOSTNAME}"
    group_id => "logstash"
    auto_offset_reset => "latest"
    consumer_threads => 5
    receive_buffer_bytes => 1000000
    enable_metric => "true"
    codec => "json"
  }

}

# start of filter
filter {

  # generate id
  uuid {
    target => "[@metadata][uuid]"
  }

  #some logs keep timestamps in ts field
  if [ts] {
    date {
        match => [ "ts", "MMM dd, yyyy @ HH:mm:ss.SSS", "ISO8601" ]
        target => "@timestamp"
        tag_on_failure => ["_dateparsefailure"]
        remove_field => ["ts"]
    }
  }

  if [time] {
    date {
        match => [ "time", "MMM dd, yyyy @ HH:mm:ss.SSS", "ISO8601" ]
        target => "@timestamp"
        tag_on_failure => ["_dateparsefailure"]
        remove_field => ["time"]
    }
  }

  #some logs keep timestamps in timestamp field
  if [timestamp] {
    date {
        match => [ "timestamp", "MMM dd, yyyy @ HH:mm:ss.SSS", "ISO8601" ]
        target => "@timestamp"
        tag_on_failure => ["_dateparsefailure"]
        remove_field => ["timestamp"]
    }
  }

# end of filter
}

output {

  #stdout {}
  if "ingress-nginx" in [kubernetes][labels][app_kubernetes_io/name] {

    opensearch {
      hosts => ["${os_url}"]
      user => "${os_user:\"\"}"
      password => "${os_pass:\"\"}"
      cacert => "/usr/share/logstash/config/root-ca.pem"
      index => "nginx-%{+YYYY.MM.dd}"
      ssl => "true"
      document_id => "%{[@metadata][uuid]}"
    }

  } else if [SYSTEMD_UNIT] {

    opensearch {
      hosts => ["${os_url}"]
      user => "${os_user:\"\"}"
      password => "${os_pass:\"\"}"
      cacert => "/usr/share/logstash/config/root-ca.pem"
      index => "systemd-%{+YYYY.MM.dd}"
      ssl => "true"
      document_id => "%{[@metadata][uuid]}"

    }

  } else {

    opensearch {
      hosts => ["${os_url}"]
      user => "${os_user:\"\"}"
      password => "${os_pass:\"\"}"
      cacert => "/usr/share/logstash/config/root-ca.pem"
      index => "containers-%{+YYYY.MM.dd}"
      ssl => "true"
      document_id => "%{[@metadata][uuid]}"
    }

  }

}