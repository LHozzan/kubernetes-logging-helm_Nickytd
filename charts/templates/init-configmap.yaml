apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name}}-init
  labels: {{ include "logging.labels" . | indent 4 }}
data:
  check_host_port.sh: |-
    #!/bin/bash
    set -e    

    if [[ $1 == http* ]]; then
      # extract the protocol
      proto="$(echo $1 | grep :// | sed -e's,^\(.*://\).*,\1,g')"
      # remove the protocol
      url="$(echo ${1/$proto/})"
      # extract the user (if any)
      user="$(echo $url | grep @ | cut -d@ -f1)"
      # extract the host and port
      hostport="$(echo ${url/$user@/} | cut -d/ -f1)"
      # by request host without port    
      host="$(echo $hostport | sed -e 's,:.*,,g')"
      # by request - try to extract the port
      port=`echo $hostport | grep : | cut -d: -f2`
      if [[ -z $port ]]; then
        if [[ $proto = http:// ]]; then
          port=80
        fi
        if [[ $proto == https:// ]]; then 
          port=443 
        fi
     fi 
     else
       host=$1
       port=$2
     fi  
     
     echo "checking $host:$port"
       
     until $(nc -z -w 5 $host $port); do 
       echo "retrying $host:$port"
       sleep 5
     done  

     echo "initialized"

  check_es.sh: |-
    #!/bin/bash
    set -e

    if [ -z ${es_url+x} ]; then
      echo "elasticsearch url env variable (es_url) is expected but not found";
      exit -1
    elif [ -z ${es_user+x} ]; then
      echo "elasticsearch user env variable (es_user) is expected but not found";
      exit -1
    elif [ -z ${es_pass+x} ]; then
      echo "elasticsearch password env variable (es_pass) is expected but not found";
      exit -1
    fi

    echo "checking elasticsearch $es_url"
    
    check="curl -sk -w "%{http_code}" -u$es_user:$es_pass $es_url -o /dev/null"

    until [[ $($check) == "200" ]]; do
      echo "retrying $es_url"
      sleep 5
    done
    
