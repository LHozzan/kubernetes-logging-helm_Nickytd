{{- define "kibanaurl" -}}
{{- if $.Values.kibana.in_cluster -}}
{{ printf "http://%s-kibana.%s.svc.cluster.local:5601" .Release.Name .Release.Namespace }}
{{- else -}}
{{- printf "%s" .Values.kibana.url -}}
{{- end -}}
{{- end -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-kibana-create-index-pattern
  labels: {{ include "logging.labels" . | indent 4 }}
  annotations:
    "helm.sh/hook": "post-install,post-upgrade"
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": "before-hook-creation"
spec:
  backoffLimit: 0
  template:
    spec:
      restartPolicy: Never
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets: {{ toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
      - name: init
        image: {{ include "init_container.image" .}}
        imagePullPolicy: {{ .Values.init_container_image.imagePullPolicy }}
        command: ["sh", "-xc", 'while (true) do if [ $(curl -s -o /dev/null -w \"%{http_code}\" -u {{ .Values.kibana.user }}:{{ .Values.kibana.password }} {{ include "kibanaurl" .}}/status) = \"200\" ]; then echo "ready"; exit 0; fi; echo \"retry request {{ include "kibanaurl" .}}/status\"; sleep 2; done']
        
      containers:
      - name: main
        image: {{ .Values.opendistro.image }}-kibana:{{ .Values.opendistro.imageTag }}        
        command: ["bash","/tmp/create_index_pattern.sh", {{ include "kibanaurl" .}}, "{{ $.Values.kibana.index }}", "{{ .Values.kibana.user }}", "{{ .Values.kibana.password }}"]
        
        volumeMounts:
        - mountPath: "/tmp/create_index_pattern.sh"
          subPath: create_index_pattern.sh
          name: config
        - mountPath: "/tmp/saved_objects"
          name: saved-objects
      volumes:
      - name: config
        configMap:
          name: {{ .Release.Name }}-kibana
      - name: saved-objects
        configMap:    
          name: {{ .Release.Name }}-kibana-saved-objects