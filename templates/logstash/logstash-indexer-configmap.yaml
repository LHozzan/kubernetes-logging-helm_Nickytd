apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name}}-logstash-indexer
  labels: {{ include "logging.labels" . | indent 4 }}
data:
  pipelines.yml: |-
{{- range $path, $bytes := .Files.Glob "logstash-indexer-pipelines/*-pipeline.conf" }}
    - pipeline.id: {{ printf "%s" (base $path) }}
      pipeline.workers: 8
      path.config: {{ printf "%s%s" "/usr/share/logstash/pipeline/" (base $path) }}
{{- end }}
  log4j2.properties: |-
    status = error
    name = LogstashPropertiesConfig

    appender.console.type = Console
    appender.console.name = plain_console
    appender.console.layout.type = PatternLayout
    appender.console.layout.pattern = [%d{ISO8601}][%-5p][%-25c] %m%n

    appender.json_console.type = Console
    appender.json_console.name = json_console
    appender.json_console.layout.type = JSONLayout
    appender.json_console.layout.compact = true
    appender.json_console.layout.eventEol = true

    rootLogger.level = ${sys:ls.log.level}

    rootLogger.appenderRef.console.ref = ${sys:ls.log.format}_console

    logger.elasticsearchoutput.name = logstash.outputs.elasticsearch
    logger.elasticsearchoutput.level = info
    
    logger.inputs_kafka.name=logstash.inputs.kafka
    logger.inputs_kafka.level=warn

    logger.filters_json.name=logstash.filters.json
    logger.filters_json.level=error
    
    #logger.inputs.name=logstash.inputs.file
    #logger.inputs.level=warn
    #logger.outputs.name=logstash.outputs.kafka
    #logger.outputs.level=debug
    #logger.pipeline.name=logstash.pipeline
    #logger.pipeline.level=debug
    #logger.grok.name=logstash.filters.grok
    #logger.grok.level=debug
    #logger.mutate.name=logstash.filters.mutate
    #logger.mutate.level=debug
    #logger.kafka_consumer.name=org.apache.kafka.clients.consumer.KafkaConsumer
    #logger.kafka_consumer.level=debug

  logstash.yml: |-
    http.host: "0.0.0.0"
    #path.config: /usr/share/logstash/pipeline/*-pipeline.conf
    path.settings: /usr/share/logstash/config
    queue.type: persisted
    pipeline.batch.size: 125

  jvm.options: |-
    ## JVM configuration

    # Xms represents the initial size of total heap space
    # Xmx represents the maximum size of total heap space    

    -Xms{{ .Values.logstash_indexer.heap_size }}
    -Xmx{{ .Values.logstash_indexer.heap_size }}

    ################################################################
    ## Expert settings
    ################################################################
    ##
    ## All settings below this section are considered
    ## expert settings. Don't tamper with them unless
    ## you understand what you are doing
    ##
    ################################################################    

    ## GC configuration
    #-XX:+UseConcMarkSweepGC
    #-XX:CMSInitiatingOccupancyFraction=75
    #-XX:+UseCMSInitiatingOccupancyOnly    

    ## Locale
    # Set the locale language
    #-Duser.language=en    

    # Set the locale country
    #-Duser.country=US    

    # Set the locale variant, if any
    #-Duser.variant=    

    ## basic    

    # set the I/O temp directory
    #-Djava.io.tmpdir=$HOME    

    # set to headless, just in case
    -Djava.awt.headless=true    

    # ensure UTF-8 encoding by default (e.g. filenames)
    -Dfile.encoding=UTF-8    

    # use our provided JNA always versus the system one
    #-Djna.nosys=true    

    # Turn on JRuby invokedynamic
    -Djruby.compile.invokedynamic=true
    # Force Compilation
    -Djruby.jit.threshold=0
    # Make sure joni regexp interruptability is enabled
    -Djruby.regexp.interruptible=true    

    ## heap dumps    

    # generate a heap dump when an allocation from the Java heap fails
    # heap dumps are created in the working directory of the JVM
    -XX:+HeapDumpOnOutOfMemoryError    

    # specify an alternative path for heap dumps
    # ensure the directory exists and has sufficient space
    #-XX:HeapDumpPath=${LOGSTASH_HOME}/heapdump.hprof    

    ## GC logging
    -XX:+PrintGCDetails
    #-XX:+PrintGCTimeStamps
    #-XX:+PrintGCDateStamps
    #-XX:+PrintClassHistogram
    #-XX:+PrintTenuringDistribution
    #-XX:+PrintGCApplicationStoppedTime    

    # log GC status to a file with time stamps
    # ensure the directory exists
    #-Xloggc:${LS_GC_LOG_FILE}    

    # Entropy source for randomness
    -Djava.security.egd=file:/dev/urandom    

    # Copy the logging context from parent threads to children
    -Dlog4j2.isThreadContextMapInheritable=true  
 
