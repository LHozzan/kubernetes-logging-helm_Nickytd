apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-kafka-topics
  labels: {{ include "logging.labels" . | indent 4 }}
data:
  topics.conf: |
    {{- range .Values.kafka.topics }}
      {{ printf "%s;%s;%d" .name .config ( (default $.Values.kafka.replicas .partitions ) | int) }}
    {{ end }}

  setup.sh: |-
    #!/bin/bash

    input="$(dirname $0)/topics.conf"

    repfactor=$((--replicas))
    if [[ $repfactor -lt 1 ]]; then
      # The replication factor must be between 1 and 32767 inclusive
      repfactor=1
    fi

    if [[ -f "$input" ]]; then
      while IFS= read -r line; do
      IFS=';' read -ra topic <<< "$line"

      # Check settings line format
      if [[ ${#topic[@]} -ne 3 ]]; then
        echo -e "WARN: Topic configuration line mismatch, expected:\n  name;config;partitions\ngot\n  ${line}\nignoring line."
        continue
      fi

      # Parsing line to variables
      topicname="${topic[0]}"
      topicconfig="${topic[1]}"
      topicparitions=${topic[2]}

      echo -e "--=== Working with topic \"$topicname\" ===---"

      # Check current Kafka topic state
      echo -n "INFO: Looking for topic in current Kafka instance ..."
      topicexist=$(/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server $kafka --list \
        | grep -c $topicname)

      if [[ $topicexist -lt 1 ]]; then
        # Topic not exist, we will create one
        echo -e " not found, creating."

        if [[ $replicas -gt $topicparitions ]]; then
          echo -e "WARN: Partitions count is not optimal (instances:$replicas, partitions:$topicparitions)."
          echo -e "      Kafka will maybe overheating!\n"
        fi

        echo -en "INFO: "
        /opt/bitnami/kafka/bin/kafka-topics.sh \
          --bootstrap-server $kafka --create --topic $topicname \
          --partitions $topicparitions \
          --replication-factor $repfactor \
          --if-not-exists

        echo -en "INFO: "
        /opt/bitnami/kafka/bin/kafka-configs.sh \
          --bootstrap-server $kafka --alter \
          --topic $topicname \
          --add-config $topicconfig

        echo -e "INFO: New topic $topicname was created."

      else

        # Topic exist, check it current state
        echo -e " found, checking state."

        topicdescription=$(/opt/bitnami/kafka/bin/kafka-topics.sh \
          --describe --bootstrap-server $kafka \
          --topic $topicname)

        # Check current Kafka topic partitions count
        partitions=$(echo "$topicdescription" | head -n 1 | awk '{print $6}')

        # Grow kafka topic partitions if needed
        if [[ $topicparitions -gt $partitions ]]; then
          echo "INFO: Growing topic partitions count from $partitions to $topicparitions"
          /opt/bitnami/kafka/bin/kafka-topics.sh \
            --bootstrap-server $kafka --alter --topic $topicname \
            --partitions $topicparitions \
            --if-exists
        elif [[ $topicparitions -lt $partitions ]]; then
          echo "WARN: Reducing topic partitions is not allowed, current partitions count is $partitions (desired:$topicparitions) and stay as is."
        else
          echo "INFO: Topic partitions are in desired state (current:$partitions, desired:$topicparitions)."
        fi

        # Check current topic replication factor
        replicationfactor=$(echo "$topicdescription" | head -n 1 | awk '{print $8}')

        # Change topic replication factor if needed
        if [[ $repfactor -ne $replicationfactor ]]; then
          echo "INFO: Changing replication factor from $replicationfactor to $repfactor"

          if [[ $repfactor == 1 ]]; then

            brokers=0
            for (( i=0; i<${topicparitions}; i++ )); do
              set="$set{\"topic\":\"$topicname\",\"partition\":$i,\"replicas\":[$brokers]}"
              if (( $i != $topicparitions-1 )); then
                set="$set,"
              fi
              if [[ $brokers == $topicparitions-1 ]]; then
                brokers=0
              fi
              brokers=$((brokers++))
            done

          else

            # Determine brokers string for replication factor change, if needed
            for (( r=0; r<=$repfactor; r++ )); do
              brokers="$brokers,$r"
            done
            brokers=${brokers#","}

            for (( i=0; i<${topicparitions}; i++ )); do
              b="$(echo $brokers | tr "," "\n" | shuf | tr  "\n" ",")"; b=${b%","}
              set="$set{\"topic\":\"$topicname\",\"partition\":$i,\"replicas\":[$b]}"
              if (( $i != $topicparitions-1 )); then
                set="$set,"
              fi
            done

          fi

          echo "{\"version\":1,\"partitions\":[$set]}" > /tmp/reassign.json
          /opt/bitnami/kafka/bin/kafka-reassign-partitions.sh \
            --bootstrap-server $kafka --reassignment-json-file /tmp/reassign.json \
            --execute

        else

          echo "INFO: Topic replication factor is in desired state (current:$replicationfactor, desired:$repfactor)."

        fi

        # Refresh topic configuration, change if needed, handled by Kafka itself
        configs=$(echo "$topicdescription" | head -n 1 | awk '{print $10}')
        echo -e "INFO: Refreshing topic configuration.\n  Current: $configs\n  Desired: $topicconfig"

        /opt/bitnami/kafka/bin/kafka-configs.sh \
          --bootstrap-server $kafka --alter \
          --topic $topicname \
          --add-config ${topicconfig}
      fi

      echo -e "--- --- ---\n== Current topic state:"

      /opt/bitnami/kafka/bin/kafka-topics.sh \
        --bootstrap-server $kafka --describe --topic $topicname

      echo -e "--=== --- ===---"
      done < "$input"

    else

      echo "ERROR: Topics configuration is not found!"
      exit 1

    fi