{{- if not .Values.opensearch.certManager.enabled }}
{{- $param := dict "name" "opensearch-certificates" "namespace" .Release.Name -}}
{{- $name := (include "getSecretName" $param ) -}}
{{- $ca := genCA "logging" 3650 }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-opensearch-certificates
  labels: {{ include "logging.labels" . | indent 4 }}
type: kubernetes.io/tls
data:
  {{- $secret := lookup "v1" "Secret" .Release.Namespace $name -}}
  {{- if or (not $secret) (not $secret.data) }}
  # generate certificates if secret does not exists
  {{- $cn := printf "*.%s.svc.cluster.local" .Release.Namespace }}
  {{- $an := list ( $cn ) }}
  {{- $server := genSignedCert $cn nil $an 3650 $ca }}
  ca.crt: {{ b64enc $ca.Cert }}
  tls.crt: {{ b64enc $server.Cert }}
  tls.key: {{ b64enc $server.Key }}
  {{- else }}
  # reset existing secret values
  ca.crt: {{ index $secret.data "ca.crt" }}
  tls.crt: {{ index $secret.data "tls.crt" }}
  tls.key: {{ index $secret.data "tls.key" }}
  {{- end }}
---
{{- $param := dict "name" "opensearch-admin-certificate" "namespace" .Release.Name -}}
{{- $name := (include "getSecretName" $param ) -}}
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-opensearch-admin-certificate
  labels: {{ include "logging.labels" . | indent 4 }}
type: kubernetes.io/tls
data:
  {{- $secret := lookup "v1" "Secret" .Release.Namespace $name -}}
  {{- if or (not $secret) (not $secret.data) }}
  # generate certificate if secret does not exists
  {{- $admin := genSignedCert "admin" nil nil 3650 $ca }}
  ca.crt: {{ b64enc $ca.Cert }}
  tls.crt: {{ b64enc $admin.Cert }}
  tls.key: {{ b64enc $admin.Key }}
  {{- else }}
  # reset existing secret values
  ca.crt: {{ index $secret.data "ca.crt" }}
  tls.crt: {{ index $secret.data "tls.crt" }}
  tls.key: {{ index $secret.data "tls.key" }}
  {{- end }}
{{- end }}